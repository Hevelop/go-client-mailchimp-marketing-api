/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mailchimpmarketingapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MemberTags type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MemberTags{}

// MemberTags A list of tags assigned to a list member.
type MemberTags struct {
	// A list of tags assigned to the list member.
	Tags []MemberTag `json:"tags"`
	// When is_syncing is true, automations based on the tags in the request will not fire
	IsSyncing *bool `json:"is_syncing,omitempty"`
}

type _MemberTags MemberTags

// NewMemberTags instantiates a new MemberTags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberTags(tags []MemberTag) *MemberTags {
	this := MemberTags{}
	this.Tags = tags
	return &this
}

// NewMemberTagsWithDefaults instantiates a new MemberTags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberTagsWithDefaults() *MemberTags {
	this := MemberTags{}
	return &this
}

// GetTags returns the Tags field value
func (o *MemberTags) GetTags() []MemberTag {
	if o == nil {
		var ret []MemberTag
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *MemberTags) GetTagsOk() ([]MemberTag, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *MemberTags) SetTags(v []MemberTag) {
	o.Tags = v
}

// GetIsSyncing returns the IsSyncing field value if set, zero value otherwise.
func (o *MemberTags) GetIsSyncing() bool {
	if o == nil || IsNil(o.IsSyncing) {
		var ret bool
		return ret
	}
	return *o.IsSyncing
}

// GetIsSyncingOk returns a tuple with the IsSyncing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberTags) GetIsSyncingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSyncing) {
		return nil, false
	}
	return o.IsSyncing, true
}

// HaveIsSyncing returns a boolean if a field has been set.
func (o *MemberTags) HaveIsSyncing() bool {
	if o != nil && !IsNil(o.IsSyncing) {
		return true
	}

	return false
}

// SetIsSyncing gets a reference to the given bool and assigns it to the IsSyncing field.
func (o *MemberTags) SetIsSyncing(v bool) {
	o.IsSyncing = &v
}

func (o MemberTags) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MemberTags) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tags"] = o.Tags
	if !IsNil(o.IsSyncing) {
		toSerialize["is_syncing"] = o.IsSyncing
	}
	return toSerialize, nil
}

func (o *MemberTags) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMemberTags := _MemberTags{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMemberTags)

	if err != nil {
		return err
	}

	*o = MemberTags(varMemberTags)

	return err
}

type NullableMemberTags struct {
	value *MemberTags
	isSet bool
}

func (v NullableMemberTags) Get() *MemberTags {
	return v.value
}

func (v *NullableMemberTags) Set(val *MemberTags) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberTags) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberTags(val *MemberTags) *NullableMemberTags {
	return &NullableMemberTags{value: val, isSet: true}
}

func (v NullableMemberTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


