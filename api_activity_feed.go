/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mailchimpmarketingapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type ActivityFeedAPI interface {

	/*
	GetActivityFeedChimpChatter Get latest chimp chatter

	Return the Chimp Chatter for this account ordered by most recent.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ActivityFeedAPIGetActivityFeedChimpChatterRequest
	*/
	GetActivityFeedChimpChatter(ctx context.Context) ActivityFeedAPIGetActivityFeedChimpChatterRequest

	// GetActivityFeedChimpChatterExecute executes the request
	//  @return GetActivityFeedChimpChatter200Response
	GetActivityFeedChimpChatterExecute(r ActivityFeedAPIGetActivityFeedChimpChatterRequest) (*GetActivityFeedChimpChatter200Response, *http.Response, error)
}

// ActivityFeedAPIService ActivityFeedAPI service
type ActivityFeedAPIService service

type ActivityFeedAPIGetActivityFeedChimpChatterRequest struct {
	ctx context.Context
	ApiService ActivityFeedAPI
	count *int32
	offset *int32
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ActivityFeedAPIGetActivityFeedChimpChatterRequest) Count(count int32) ActivityFeedAPIGetActivityFeedChimpChatterRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ActivityFeedAPIGetActivityFeedChimpChatterRequest) Offset(offset int32) ActivityFeedAPIGetActivityFeedChimpChatterRequest {
	r.offset = &offset
	return r
}

func (r ActivityFeedAPIGetActivityFeedChimpChatterRequest) Execute() (*GetActivityFeedChimpChatter200Response, *http.Response, error) {
	return r.ApiService.GetActivityFeedChimpChatterExecute(r)
}

/*
GetActivityFeedChimpChatter Get latest chimp chatter

Return the Chimp Chatter for this account ordered by most recent.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ActivityFeedAPIGetActivityFeedChimpChatterRequest
*/
func (a *ActivityFeedAPIService) GetActivityFeedChimpChatter(ctx context.Context) ActivityFeedAPIGetActivityFeedChimpChatterRequest {
	return ActivityFeedAPIGetActivityFeedChimpChatterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetActivityFeedChimpChatter200Response
func (a *ActivityFeedAPIService) GetActivityFeedChimpChatterExecute(r ActivityFeedAPIGetActivityFeedChimpChatterRequest) (*GetActivityFeedChimpChatter200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetActivityFeedChimpChatter200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityFeedAPIService.GetActivityFeedChimpChatter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activity-feed/chimp-chatter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
