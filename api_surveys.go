/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mailchimpmarketingapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SurveysAPI interface {

	/*
	PostListsIdSurveysIdActionsCreateEmail Create a Survey Campaign

	Utilize the List ID and Survey ID to generate a Campaign that links to your survey.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param listId The unique ID for the list.
	@param surveyId The ID of the survey.
	@return SurveysAPIPostListsIdSurveysIdActionsCreateEmailRequest
	*/
	PostListsIdSurveysIdActionsCreateEmail(ctx context.Context, listId string, surveyId string) SurveysAPIPostListsIdSurveysIdActionsCreateEmailRequest

	// PostListsIdSurveysIdActionsCreateEmailExecute executes the request
	//  @return Campaign3
	PostListsIdSurveysIdActionsCreateEmailExecute(r SurveysAPIPostListsIdSurveysIdActionsCreateEmailRequest) (*Campaign3, *http.Response, error)

	/*
	PostListsIdSurveysIdActionsPublish Publish a Survey

	Publish a survey that is in draft, unpublished, or has been previously published and edited.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param listId The unique ID for the list.
	@param surveyId The ID of the survey.
	@return SurveysAPIPostListsIdSurveysIdActionsPublishRequest
	*/
	PostListsIdSurveysIdActionsPublish(ctx context.Context, listId string, surveyId string) SurveysAPIPostListsIdSurveysIdActionsPublishRequest

	// PostListsIdSurveysIdActionsPublishExecute executes the request
	PostListsIdSurveysIdActionsPublishExecute(r SurveysAPIPostListsIdSurveysIdActionsPublishRequest) (*http.Response, error)

	/*
	PostListsIdSurveysIdActionsUnpublish Unpublish a Survey

	Unpublish a survey that has been published.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param listId The unique ID for the list.
	@param surveyId The ID of the survey.
	@return SurveysAPIPostListsIdSurveysIdActionsUnpublishRequest
	*/
	PostListsIdSurveysIdActionsUnpublish(ctx context.Context, listId string, surveyId string) SurveysAPIPostListsIdSurveysIdActionsUnpublishRequest

	// PostListsIdSurveysIdActionsUnpublishExecute executes the request
	PostListsIdSurveysIdActionsUnpublishExecute(r SurveysAPIPostListsIdSurveysIdActionsUnpublishRequest) (*http.Response, error)
}

// SurveysAPIService SurveysAPI service
type SurveysAPIService service

type SurveysAPIPostListsIdSurveysIdActionsCreateEmailRequest struct {
	ctx context.Context
	ApiService SurveysAPI
	listId string
	surveyId string
}

func (r SurveysAPIPostListsIdSurveysIdActionsCreateEmailRequest) Execute() (*Campaign3, *http.Response, error) {
	return r.ApiService.PostListsIdSurveysIdActionsCreateEmailExecute(r)
}

/*
PostListsIdSurveysIdActionsCreateEmail Create a Survey Campaign

Utilize the List ID and Survey ID to generate a Campaign that links to your survey.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param listId The unique ID for the list.
 @param surveyId The ID of the survey.
 @return SurveysAPIPostListsIdSurveysIdActionsCreateEmailRequest
*/
func (a *SurveysAPIService) PostListsIdSurveysIdActionsCreateEmail(ctx context.Context, listId string, surveyId string) SurveysAPIPostListsIdSurveysIdActionsCreateEmailRequest {
	return SurveysAPIPostListsIdSurveysIdActionsCreateEmailRequest{
		ApiService: a,
		ctx: ctx,
		listId: listId,
		surveyId: surveyId,
	}
}

// Execute executes the request
//  @return Campaign3
func (a *SurveysAPIService) PostListsIdSurveysIdActionsCreateEmailExecute(r SurveysAPIPostListsIdSurveysIdActionsCreateEmailRequest) (*Campaign3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Campaign3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveysAPIService.PostListsIdSurveysIdActionsCreateEmail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/lists/{list_id}/surveys/{survey_id}/actions/create-email"
	localVarPath = strings.Replace(localVarPath, "{"+"list_id"+"}", url.PathEscape(parameterValueToString(r.listId, "listId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"survey_id"+"}", url.PathEscape(parameterValueToString(r.surveyId, "surveyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SurveysAPIPostListsIdSurveysIdActionsPublishRequest struct {
	ctx context.Context
	ApiService SurveysAPI
	listId string
	surveyId string
}

func (r SurveysAPIPostListsIdSurveysIdActionsPublishRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostListsIdSurveysIdActionsPublishExecute(r)
}

/*
PostListsIdSurveysIdActionsPublish Publish a Survey

Publish a survey that is in draft, unpublished, or has been previously published and edited.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param listId The unique ID for the list.
 @param surveyId The ID of the survey.
 @return SurveysAPIPostListsIdSurveysIdActionsPublishRequest
*/
func (a *SurveysAPIService) PostListsIdSurveysIdActionsPublish(ctx context.Context, listId string, surveyId string) SurveysAPIPostListsIdSurveysIdActionsPublishRequest {
	return SurveysAPIPostListsIdSurveysIdActionsPublishRequest{
		ApiService: a,
		ctx: ctx,
		listId: listId,
		surveyId: surveyId,
	}
}

// Execute executes the request
func (a *SurveysAPIService) PostListsIdSurveysIdActionsPublishExecute(r SurveysAPIPostListsIdSurveysIdActionsPublishRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveysAPIService.PostListsIdSurveysIdActionsPublish")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/lists/{list_id}/surveys/{survey_id}/actions/publish"
	localVarPath = strings.Replace(localVarPath, "{"+"list_id"+"}", url.PathEscape(parameterValueToString(r.listId, "listId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"survey_id"+"}", url.PathEscape(parameterValueToString(r.surveyId, "surveyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SurveysAPIPostListsIdSurveysIdActionsUnpublishRequest struct {
	ctx context.Context
	ApiService SurveysAPI
	listId string
	surveyId string
}

func (r SurveysAPIPostListsIdSurveysIdActionsUnpublishRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostListsIdSurveysIdActionsUnpublishExecute(r)
}

/*
PostListsIdSurveysIdActionsUnpublish Unpublish a Survey

Unpublish a survey that has been published.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param listId The unique ID for the list.
 @param surveyId The ID of the survey.
 @return SurveysAPIPostListsIdSurveysIdActionsUnpublishRequest
*/
func (a *SurveysAPIService) PostListsIdSurveysIdActionsUnpublish(ctx context.Context, listId string, surveyId string) SurveysAPIPostListsIdSurveysIdActionsUnpublishRequest {
	return SurveysAPIPostListsIdSurveysIdActionsUnpublishRequest{
		ApiService: a,
		ctx: ctx,
		listId: listId,
		surveyId: surveyId,
	}
}

// Execute executes the request
func (a *SurveysAPIService) PostListsIdSurveysIdActionsUnpublishExecute(r SurveysAPIPostListsIdSurveysIdActionsUnpublishRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveysAPIService.PostListsIdSurveysIdActionsUnpublish")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/lists/{list_id}/surveys/{survey_id}/actions/unpublish"
	localVarPath = strings.Replace(localVarPath, "{"+"list_id"+"}", url.PathEscape(parameterValueToString(r.listId, "listId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"survey_id"+"}", url.PathEscape(parameterValueToString(r.surveyId, "surveyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
