/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mailchimpmarketingapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type LandingPagesAPI interface {

	/*
	DeleteLandingPageId Delete landing page

	Delete a landing page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pageId The unique id for the page.
	@return LandingPagesAPIDeleteLandingPageIdRequest
	*/
	DeleteLandingPageId(ctx context.Context, pageId string) LandingPagesAPIDeleteLandingPageIdRequest

	// DeleteLandingPageIdExecute executes the request
	DeleteLandingPageIdExecute(r LandingPagesAPIDeleteLandingPageIdRequest) (*http.Response, error)

	/*
	GetAllLandingPages List landing pages

	Get all landing pages.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LandingPagesAPIGetAllLandingPagesRequest
	*/
	GetAllLandingPages(ctx context.Context) LandingPagesAPIGetAllLandingPagesRequest

	// GetAllLandingPagesExecute executes the request
	//  @return GetAllLandingPages200Response
	GetAllLandingPagesExecute(r LandingPagesAPIGetAllLandingPagesRequest) (*GetAllLandingPages200Response, *http.Response, error)

	/*
	GetLandingPageId Get landing page info

	Get information about a specific page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pageId The unique id for the page.
	@return LandingPagesAPIGetLandingPageIdRequest
	*/
	GetLandingPageId(ctx context.Context, pageId string) LandingPagesAPIGetLandingPageIdRequest

	// GetLandingPageIdExecute executes the request
	//  @return LandingPage
	GetLandingPageIdExecute(r LandingPagesAPIGetLandingPageIdRequest) (*LandingPage, *http.Response, error)

	/*
	GetLandingPageIdContent Get landing page content

	Get the the HTML for your landing page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pageId The unique id for the page.
	@return LandingPagesAPIGetLandingPageIdContentRequest
	*/
	GetLandingPageIdContent(ctx context.Context, pageId string) LandingPagesAPIGetLandingPageIdContentRequest

	// GetLandingPageIdContentExecute executes the request
	//  @return LandingPageContent
	GetLandingPageIdContentExecute(r LandingPagesAPIGetLandingPageIdContentRequest) (*LandingPageContent, *http.Response, error)

	/*
	PatchLandingPageId Update landing page

	Update a landing page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pageId The unique id for the page.
	@return LandingPagesAPIPatchLandingPageIdRequest
	*/
	PatchLandingPageId(ctx context.Context, pageId string) LandingPagesAPIPatchLandingPageIdRequest

	// PatchLandingPageIdExecute executes the request
	//  @return LandingPage
	PatchLandingPageIdExecute(r LandingPagesAPIPatchLandingPageIdRequest) (*LandingPage, *http.Response, error)

	/*
	PostAllLandingPages Add landing page

	Create a new Mailchimp landing page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return LandingPagesAPIPostAllLandingPagesRequest
	*/
	PostAllLandingPages(ctx context.Context) LandingPagesAPIPostAllLandingPagesRequest

	// PostAllLandingPagesExecute executes the request
	//  @return LandingPage
	PostAllLandingPagesExecute(r LandingPagesAPIPostAllLandingPagesRequest) (*LandingPage, *http.Response, error)

	/*
	PostLandingPageIdActionsPublish Publish landing page

	Publish a landing page that is in draft, unpublished, or has been previously published and edited.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pageId The unique id for the page.
	@return LandingPagesAPIPostLandingPageIdActionsPublishRequest
	*/
	PostLandingPageIdActionsPublish(ctx context.Context, pageId string) LandingPagesAPIPostLandingPageIdActionsPublishRequest

	// PostLandingPageIdActionsPublishExecute executes the request
	PostLandingPageIdActionsPublishExecute(r LandingPagesAPIPostLandingPageIdActionsPublishRequest) (*http.Response, error)

	/*
	PostLandingPageIdActionsUnpublish Unpublish landing page

	Unpublish a landing page that is in draft or has been published.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param pageId The unique id for the page.
	@return LandingPagesAPIPostLandingPageIdActionsUnpublishRequest
	*/
	PostLandingPageIdActionsUnpublish(ctx context.Context, pageId string) LandingPagesAPIPostLandingPageIdActionsUnpublishRequest

	// PostLandingPageIdActionsUnpublishExecute executes the request
	PostLandingPageIdActionsUnpublishExecute(r LandingPagesAPIPostLandingPageIdActionsUnpublishRequest) (*http.Response, error)
}

// LandingPagesAPIService LandingPagesAPI service
type LandingPagesAPIService service

type LandingPagesAPIDeleteLandingPageIdRequest struct {
	ctx context.Context
	ApiService LandingPagesAPI
	pageId string
}

func (r LandingPagesAPIDeleteLandingPageIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLandingPageIdExecute(r)
}

/*
DeleteLandingPageId Delete landing page

Delete a landing page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId The unique id for the page.
 @return LandingPagesAPIDeleteLandingPageIdRequest
*/
func (a *LandingPagesAPIService) DeleteLandingPageId(ctx context.Context, pageId string) LandingPagesAPIDeleteLandingPageIdRequest {
	return LandingPagesAPIDeleteLandingPageIdRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
	}
}

// Execute executes the request
func (a *LandingPagesAPIService) DeleteLandingPageIdExecute(r LandingPagesAPIDeleteLandingPageIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LandingPagesAPIService.DeleteLandingPageId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/landing-pages/{page_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", url.PathEscape(parameterValueToString(r.pageId, "pageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LandingPagesAPIGetAllLandingPagesRequest struct {
	ctx context.Context
	ApiService LandingPagesAPI
	sortDir *string
	sortField *string
	fields *[]string
	excludeFields *[]string
	count *int32
}

// Determines the order direction for sorted results.
func (r LandingPagesAPIGetAllLandingPagesRequest) SortDir(sortDir string) LandingPagesAPIGetAllLandingPagesRequest {
	r.sortDir = &sortDir
	return r
}

// Returns files sorted by the specified field.
func (r LandingPagesAPIGetAllLandingPagesRequest) SortField(sortField string) LandingPagesAPIGetAllLandingPagesRequest {
	r.sortField = &sortField
	return r
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r LandingPagesAPIGetAllLandingPagesRequest) Fields(fields []string) LandingPagesAPIGetAllLandingPagesRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r LandingPagesAPIGetAllLandingPagesRequest) ExcludeFields(excludeFields []string) LandingPagesAPIGetAllLandingPagesRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r LandingPagesAPIGetAllLandingPagesRequest) Count(count int32) LandingPagesAPIGetAllLandingPagesRequest {
	r.count = &count
	return r
}

func (r LandingPagesAPIGetAllLandingPagesRequest) Execute() (*GetAllLandingPages200Response, *http.Response, error) {
	return r.ApiService.GetAllLandingPagesExecute(r)
}

/*
GetAllLandingPages List landing pages

Get all landing pages.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LandingPagesAPIGetAllLandingPagesRequest
*/
func (a *LandingPagesAPIService) GetAllLandingPages(ctx context.Context) LandingPagesAPIGetAllLandingPagesRequest {
	return LandingPagesAPIGetAllLandingPagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetAllLandingPages200Response
func (a *LandingPagesAPIService) GetAllLandingPagesExecute(r LandingPagesAPIGetAllLandingPagesRequest) (*GetAllLandingPages200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetAllLandingPages200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LandingPagesAPIService.GetAllLandingPages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/landing-pages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.sortDir != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_dir", r.sortDir, "")
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_field", r.sortField, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LandingPagesAPIGetLandingPageIdRequest struct {
	ctx context.Context
	ApiService LandingPagesAPI
	pageId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r LandingPagesAPIGetLandingPageIdRequest) Fields(fields []string) LandingPagesAPIGetLandingPageIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r LandingPagesAPIGetLandingPageIdRequest) ExcludeFields(excludeFields []string) LandingPagesAPIGetLandingPageIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r LandingPagesAPIGetLandingPageIdRequest) Execute() (*LandingPage, *http.Response, error) {
	return r.ApiService.GetLandingPageIdExecute(r)
}

/*
GetLandingPageId Get landing page info

Get information about a specific page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId The unique id for the page.
 @return LandingPagesAPIGetLandingPageIdRequest
*/
func (a *LandingPagesAPIService) GetLandingPageId(ctx context.Context, pageId string) LandingPagesAPIGetLandingPageIdRequest {
	return LandingPagesAPIGetLandingPageIdRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
	}
}

// Execute executes the request
//  @return LandingPage
func (a *LandingPagesAPIService) GetLandingPageIdExecute(r LandingPagesAPIGetLandingPageIdRequest) (*LandingPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LandingPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LandingPagesAPIService.GetLandingPageId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/landing-pages/{page_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", url.PathEscape(parameterValueToString(r.pageId, "pageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LandingPagesAPIGetLandingPageIdContentRequest struct {
	ctx context.Context
	ApiService LandingPagesAPI
	pageId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r LandingPagesAPIGetLandingPageIdContentRequest) Fields(fields []string) LandingPagesAPIGetLandingPageIdContentRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r LandingPagesAPIGetLandingPageIdContentRequest) ExcludeFields(excludeFields []string) LandingPagesAPIGetLandingPageIdContentRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r LandingPagesAPIGetLandingPageIdContentRequest) Execute() (*LandingPageContent, *http.Response, error) {
	return r.ApiService.GetLandingPageIdContentExecute(r)
}

/*
GetLandingPageIdContent Get landing page content

Get the the HTML for your landing page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId The unique id for the page.
 @return LandingPagesAPIGetLandingPageIdContentRequest
*/
func (a *LandingPagesAPIService) GetLandingPageIdContent(ctx context.Context, pageId string) LandingPagesAPIGetLandingPageIdContentRequest {
	return LandingPagesAPIGetLandingPageIdContentRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
	}
}

// Execute executes the request
//  @return LandingPageContent
func (a *LandingPagesAPIService) GetLandingPageIdContentExecute(r LandingPagesAPIGetLandingPageIdContentRequest) (*LandingPageContent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LandingPageContent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LandingPagesAPIService.GetLandingPageIdContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/landing-pages/{page_id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", url.PathEscape(parameterValueToString(r.pageId, "pageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LandingPagesAPIPatchLandingPageIdRequest struct {
	ctx context.Context
	ApiService LandingPagesAPI
	pageId string
	body *LandingPage2
}

func (r LandingPagesAPIPatchLandingPageIdRequest) Body(body LandingPage2) LandingPagesAPIPatchLandingPageIdRequest {
	r.body = &body
	return r
}

func (r LandingPagesAPIPatchLandingPageIdRequest) Execute() (*LandingPage, *http.Response, error) {
	return r.ApiService.PatchLandingPageIdExecute(r)
}

/*
PatchLandingPageId Update landing page

Update a landing page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId The unique id for the page.
 @return LandingPagesAPIPatchLandingPageIdRequest
*/
func (a *LandingPagesAPIService) PatchLandingPageId(ctx context.Context, pageId string) LandingPagesAPIPatchLandingPageIdRequest {
	return LandingPagesAPIPatchLandingPageIdRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
	}
}

// Execute executes the request
//  @return LandingPage
func (a *LandingPagesAPIService) PatchLandingPageIdExecute(r LandingPagesAPIPatchLandingPageIdRequest) (*LandingPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LandingPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LandingPagesAPIService.PatchLandingPageId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/landing-pages/{page_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", url.PathEscape(parameterValueToString(r.pageId, "pageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LandingPagesAPIPostAllLandingPagesRequest struct {
	ctx context.Context
	ApiService LandingPagesAPI
	body *LandingPage1
	useDefaultList *bool
}

func (r LandingPagesAPIPostAllLandingPagesRequest) Body(body LandingPage1) LandingPagesAPIPostAllLandingPagesRequest {
	r.body = &body
	return r
}

// Will create the Landing Page using the account&#39;s Default List instead of requiring a list_id.
func (r LandingPagesAPIPostAllLandingPagesRequest) UseDefaultList(useDefaultList bool) LandingPagesAPIPostAllLandingPagesRequest {
	r.useDefaultList = &useDefaultList
	return r
}

func (r LandingPagesAPIPostAllLandingPagesRequest) Execute() (*LandingPage, *http.Response, error) {
	return r.ApiService.PostAllLandingPagesExecute(r)
}

/*
PostAllLandingPages Add landing page

Create a new Mailchimp landing page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LandingPagesAPIPostAllLandingPagesRequest
*/
func (a *LandingPagesAPIService) PostAllLandingPages(ctx context.Context) LandingPagesAPIPostAllLandingPagesRequest {
	return LandingPagesAPIPostAllLandingPagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LandingPage
func (a *LandingPagesAPIService) PostAllLandingPagesExecute(r LandingPagesAPIPostAllLandingPagesRequest) (*LandingPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LandingPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LandingPagesAPIService.PostAllLandingPages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/landing-pages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.useDefaultList != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "use_default_list", r.useDefaultList, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LandingPagesAPIPostLandingPageIdActionsPublishRequest struct {
	ctx context.Context
	ApiService LandingPagesAPI
	pageId string
}

func (r LandingPagesAPIPostLandingPageIdActionsPublishRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLandingPageIdActionsPublishExecute(r)
}

/*
PostLandingPageIdActionsPublish Publish landing page

Publish a landing page that is in draft, unpublished, or has been previously published and edited.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId The unique id for the page.
 @return LandingPagesAPIPostLandingPageIdActionsPublishRequest
*/
func (a *LandingPagesAPIService) PostLandingPageIdActionsPublish(ctx context.Context, pageId string) LandingPagesAPIPostLandingPageIdActionsPublishRequest {
	return LandingPagesAPIPostLandingPageIdActionsPublishRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
	}
}

// Execute executes the request
func (a *LandingPagesAPIService) PostLandingPageIdActionsPublishExecute(r LandingPagesAPIPostLandingPageIdActionsPublishRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LandingPagesAPIService.PostLandingPageIdActionsPublish")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/landing-pages/{page_id}/actions/publish"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", url.PathEscape(parameterValueToString(r.pageId, "pageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LandingPagesAPIPostLandingPageIdActionsUnpublishRequest struct {
	ctx context.Context
	ApiService LandingPagesAPI
	pageId string
}

func (r LandingPagesAPIPostLandingPageIdActionsUnpublishRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLandingPageIdActionsUnpublishExecute(r)
}

/*
PostLandingPageIdActionsUnpublish Unpublish landing page

Unpublish a landing page that is in draft or has been published.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pageId The unique id for the page.
 @return LandingPagesAPIPostLandingPageIdActionsUnpublishRequest
*/
func (a *LandingPagesAPIService) PostLandingPageIdActionsUnpublish(ctx context.Context, pageId string) LandingPagesAPIPostLandingPageIdActionsUnpublishRequest {
	return LandingPagesAPIPostLandingPageIdActionsUnpublishRequest{
		ApiService: a,
		ctx: ctx,
		pageId: pageId,
	}
}

// Execute executes the request
func (a *LandingPagesAPIService) PostLandingPageIdActionsUnpublishExecute(r LandingPagesAPIPostLandingPageIdActionsUnpublishRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LandingPagesAPIService.PostLandingPageIdActionsUnpublish")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/landing-pages/{page_id}/actions/unpublish"
	localVarPath = strings.Replace(localVarPath, "{"+"page_id"+"}", url.PathEscape(parameterValueToString(r.pageId, "pageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
