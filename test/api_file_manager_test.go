/*
Mailchimp Marketing API

Testing FileManagerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mailchimpmarketingapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Hevelop/go-client-mailchimp-marketing-api"
)

func Test_mailchimpmarketingapi_FileManagerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FileManagerAPIService DeleteFileManagerFilesId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileId string

		httpRes, err := apiClient.FileManagerAPI.DeleteFileManagerFilesId(context.Background(), fileId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileManagerAPIService DeleteFileManagerFoldersId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folderId string

		httpRes, err := apiClient.FileManagerAPI.DeleteFileManagerFoldersId(context.Background(), folderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileManagerAPIService GetFileManagerFiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FileManagerAPI.GetFileManagerFiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileManagerAPIService GetFileManagerFilesId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileId string

		resp, httpRes, err := apiClient.FileManagerAPI.GetFileManagerFilesId(context.Background(), fileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileManagerAPIService GetFileManagerFolders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FileManagerAPI.GetFileManagerFolders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileManagerAPIService GetFileManagerFoldersFiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folderId string

		resp, httpRes, err := apiClient.FileManagerAPI.GetFileManagerFoldersFiles(context.Background(), folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileManagerAPIService GetFileManagerFoldersId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folderId string

		resp, httpRes, err := apiClient.FileManagerAPI.GetFileManagerFoldersId(context.Background(), folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileManagerAPIService PatchFileManagerFilesId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fileId string

		resp, httpRes, err := apiClient.FileManagerAPI.PatchFileManagerFilesId(context.Background(), fileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileManagerAPIService PatchFileManagerFoldersId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var folderId string

		resp, httpRes, err := apiClient.FileManagerAPI.PatchFileManagerFoldersId(context.Background(), folderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileManagerAPIService PostFileManagerFiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FileManagerAPI.PostFileManagerFiles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FileManagerAPIService PostFileManagerFolders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FileManagerAPI.PostFileManagerFolders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
