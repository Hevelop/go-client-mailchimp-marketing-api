/*
Mailchimp Marketing API

Testing ReportsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mailchimpmarketingapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Hevelop/go-client-mailchimp-marketing-api"
)

func Test_mailchimpmarketingapi_ReportsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReportsAPIService GetReports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsAPI.GetReports(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsId(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdAbuseReportsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdAbuseReportsId(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdAbuseReportsIdId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string
		var reportId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdAbuseReportsIdId(context.Background(), campaignId, reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdAdvice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdAdvice(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdClickDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdClickDetails(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdClickDetailsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string
		var linkId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdClickDetailsId(context.Background(), campaignId, linkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdClickDetailsIdMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string
		var linkId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdClickDetailsIdMembers(context.Background(), campaignId, linkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdClickDetailsIdMembersId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string
		var linkId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdClickDetailsIdMembersId(context.Background(), campaignId, linkId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdDomainPerformance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdDomainPerformance(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdEcommerceProductActivity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdEcommerceProductActivity(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdEepurl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdEepurl(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdEmailActivity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdEmailActivity(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdEmailActivityId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdEmailActivityId(context.Background(), campaignId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdLocations(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdOpenDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdOpenDetails(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdOpenDetailsIdMembersId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdOpenDetailsIdMembersId(context.Background(), campaignId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdSentTo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdSentTo(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdSentToId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdSentToId(context.Background(), campaignId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdSubReportsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdSubReportsId(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdUnsubscribed", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdUnsubscribed(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsAPIService GetReportsIdUnsubscribedId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ReportsAPI.GetReportsIdUnsubscribedId(context.Background(), campaignId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
