/*
Mailchimp Marketing API

Testing AutomationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mailchimpmarketingapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Hevelop/go-client-mailchimp-marketing-api"
)

func Test_mailchimpmarketingapi_AutomationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AutomationsAPIService ArchiveAutomations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string

		httpRes, err := apiClient.AutomationsAPI.ArchiveAutomations(context.Background(), workflowId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService DeleteAutomationsIdEmailsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string
		var workflowEmailId string

		httpRes, err := apiClient.AutomationsAPI.DeleteAutomationsIdEmailsId(context.Background(), workflowId, workflowEmailId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService GetAutomations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AutomationsAPI.GetAutomations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService GetAutomationsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string

		resp, httpRes, err := apiClient.AutomationsAPI.GetAutomationsId(context.Background(), workflowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService GetAutomationsIdEmails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string

		resp, httpRes, err := apiClient.AutomationsAPI.GetAutomationsIdEmails(context.Background(), workflowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService GetAutomationsIdEmailsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string
		var workflowEmailId string

		resp, httpRes, err := apiClient.AutomationsAPI.GetAutomationsIdEmailsId(context.Background(), workflowId, workflowEmailId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService GetAutomationsIdEmailsIdQueue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string
		var workflowEmailId string

		resp, httpRes, err := apiClient.AutomationsAPI.GetAutomationsIdEmailsIdQueue(context.Background(), workflowId, workflowEmailId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService GetAutomationsIdEmailsIdQueueId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string
		var workflowEmailId string
		var subscriberHash string

		resp, httpRes, err := apiClient.AutomationsAPI.GetAutomationsIdEmailsIdQueueId(context.Background(), workflowId, workflowEmailId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService GetAutomationsIdRemovedSubscribers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string

		resp, httpRes, err := apiClient.AutomationsAPI.GetAutomationsIdRemovedSubscribers(context.Background(), workflowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService GetAutomationsIdRemovedSubscribersId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string
		var subscriberHash string

		resp, httpRes, err := apiClient.AutomationsAPI.GetAutomationsIdRemovedSubscribersId(context.Background(), workflowId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService PatchAutomationEmailWorkflowId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string
		var workflowEmailId string

		resp, httpRes, err := apiClient.AutomationsAPI.PatchAutomationEmailWorkflowId(context.Background(), workflowId, workflowEmailId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService PostAutomations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AutomationsAPI.PostAutomations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService PostAutomationsIdActionsPauseAllEmails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string

		httpRes, err := apiClient.AutomationsAPI.PostAutomationsIdActionsPauseAllEmails(context.Background(), workflowId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService PostAutomationsIdActionsStartAllEmails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string

		httpRes, err := apiClient.AutomationsAPI.PostAutomationsIdActionsStartAllEmails(context.Background(), workflowId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService PostAutomationsIdEmailsIdActionsPause", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string
		var workflowEmailId string

		httpRes, err := apiClient.AutomationsAPI.PostAutomationsIdEmailsIdActionsPause(context.Background(), workflowId, workflowEmailId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService PostAutomationsIdEmailsIdActionsStart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string
		var workflowEmailId string

		httpRes, err := apiClient.AutomationsAPI.PostAutomationsIdEmailsIdActionsStart(context.Background(), workflowId, workflowEmailId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService PostAutomationsIdEmailsIdQueue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string
		var workflowEmailId string

		resp, httpRes, err := apiClient.AutomationsAPI.PostAutomationsIdEmailsIdQueue(context.Background(), workflowId, workflowEmailId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AutomationsAPIService PostAutomationsIdRemovedSubscribers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workflowId string

		resp, httpRes, err := apiClient.AutomationsAPI.PostAutomationsIdRemovedSubscribers(context.Background(), workflowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
