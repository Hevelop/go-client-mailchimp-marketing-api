/*
Mailchimp Marketing API

Testing CampaignsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mailchimpmarketingapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Hevelop/go-client-mailchimp-marketing-api"
)

func Test_mailchimpmarketingapi_CampaignsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CampaignsAPIService DeleteCampaignsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		httpRes, err := apiClient.CampaignsAPI.DeleteCampaignsId(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService DeleteCampaignsIdFeedbackId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string
		var feedbackId string

		httpRes, err := apiClient.CampaignsAPI.DeleteCampaignsIdFeedbackId(context.Background(), campaignId, feedbackId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService GetCampaigns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CampaignsAPI.GetCampaigns(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService GetCampaignsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignsAPI.GetCampaignsId(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService GetCampaignsIdContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignsAPI.GetCampaignsIdContent(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService GetCampaignsIdFeedback", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignsAPI.GetCampaignsIdFeedback(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService GetCampaignsIdFeedbackId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string
		var feedbackId string

		resp, httpRes, err := apiClient.CampaignsAPI.GetCampaignsIdFeedbackId(context.Background(), campaignId, feedbackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService GetCampaignsIdSendChecklist", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignsAPI.GetCampaignsIdSendChecklist(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PatchCampaignsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignsAPI.PatchCampaignsId(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PatchCampaignsIdFeedbackId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string
		var feedbackId string

		resp, httpRes, err := apiClient.CampaignsAPI.PatchCampaignsIdFeedbackId(context.Background(), campaignId, feedbackId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PostCampaigns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CampaignsAPI.PostCampaigns(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PostCampaignsIdActionsCancelSend", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		httpRes, err := apiClient.CampaignsAPI.PostCampaignsIdActionsCancelSend(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PostCampaignsIdActionsCreateResend", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignsAPI.PostCampaignsIdActionsCreateResend(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PostCampaignsIdActionsPause", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		httpRes, err := apiClient.CampaignsAPI.PostCampaignsIdActionsPause(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PostCampaignsIdActionsReplicate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignsAPI.PostCampaignsIdActionsReplicate(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PostCampaignsIdActionsResume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		httpRes, err := apiClient.CampaignsAPI.PostCampaignsIdActionsResume(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PostCampaignsIdActionsSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		httpRes, err := apiClient.CampaignsAPI.PostCampaignsIdActionsSchedule(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PostCampaignsIdActionsSend", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		httpRes, err := apiClient.CampaignsAPI.PostCampaignsIdActionsSend(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PostCampaignsIdActionsTest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		httpRes, err := apiClient.CampaignsAPI.PostCampaignsIdActionsTest(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PostCampaignsIdActionsUnschedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		httpRes, err := apiClient.CampaignsAPI.PostCampaignsIdActionsUnschedule(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PostCampaignsIdFeedback", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignsAPI.PostCampaignsIdFeedback(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampaignsAPIService PutCampaignsIdContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campaignId string

		resp, httpRes, err := apiClient.CampaignsAPI.PutCampaignsIdContent(context.Background(), campaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
