/*
Mailchimp Marketing API

Testing LandingPagesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mailchimpmarketingapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Hevelop/go-client-mailchimp-marketing-api"
)

func Test_mailchimpmarketingapi_LandingPagesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LandingPagesAPIService DeleteLandingPageId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pageId string

		httpRes, err := apiClient.LandingPagesAPI.DeleteLandingPageId(context.Background(), pageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LandingPagesAPIService GetAllLandingPages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LandingPagesAPI.GetAllLandingPages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LandingPagesAPIService GetLandingPageId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pageId string

		resp, httpRes, err := apiClient.LandingPagesAPI.GetLandingPageId(context.Background(), pageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LandingPagesAPIService GetLandingPageIdContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pageId string

		resp, httpRes, err := apiClient.LandingPagesAPI.GetLandingPageIdContent(context.Background(), pageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LandingPagesAPIService PatchLandingPageId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pageId string

		resp, httpRes, err := apiClient.LandingPagesAPI.PatchLandingPageId(context.Background(), pageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LandingPagesAPIService PostAllLandingPages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LandingPagesAPI.PostAllLandingPages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LandingPagesAPIService PostLandingPageIdActionsPublish", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pageId string

		httpRes, err := apiClient.LandingPagesAPI.PostLandingPageIdActionsPublish(context.Background(), pageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LandingPagesAPIService PostLandingPageIdActionsUnpublish", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pageId string

		httpRes, err := apiClient.LandingPagesAPI.PostLandingPageIdActionsUnpublish(context.Background(), pageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
