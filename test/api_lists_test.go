/*
Mailchimp Marketing API

Testing ListsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mailchimpmarketingapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Hevelop/go-client-mailchimp-marketing-api"
)

func Test_mailchimpmarketingapi_ListsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ListsAPIService DeleteListsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		httpRes, err := apiClient.ListsAPI.DeleteListsId(context.Background(), listId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService DeleteListsIdInterestCategoriesId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var interestCategoryId string

		httpRes, err := apiClient.ListsAPI.DeleteListsIdInterestCategoriesId(context.Background(), listId, interestCategoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService DeleteListsIdInterestCategoriesIdInterestsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var interestCategoryId string
		var interestId string

		httpRes, err := apiClient.ListsAPI.DeleteListsIdInterestCategoriesIdInterestsId(context.Background(), listId, interestCategoryId, interestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService DeleteListsIdMembersId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		httpRes, err := apiClient.ListsAPI.DeleteListsIdMembersId(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService DeleteListsIdMembersIdNotesId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string
		var noteId string

		httpRes, err := apiClient.ListsAPI.DeleteListsIdMembersIdNotesId(context.Background(), listId, subscriberHash, noteId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService DeleteListsIdMergeFieldsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var mergeId string

		httpRes, err := apiClient.ListsAPI.DeleteListsIdMergeFieldsId(context.Background(), listId, mergeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService DeleteListsIdSegmentsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var segmentId string

		httpRes, err := apiClient.ListsAPI.DeleteListsIdSegmentsId(context.Background(), listId, segmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService DeleteListsIdSegmentsIdMembersId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var segmentId string
		var subscriberHash string

		httpRes, err := apiClient.ListsAPI.DeleteListsIdSegmentsIdMembersId(context.Background(), listId, segmentId, subscriberHash).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService DeleteListsIdWebhooksId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var webhookId string

		httpRes, err := apiClient.ListsAPI.DeleteListsIdWebhooksId(context.Background(), listId, webhookId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListMemberTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ListsAPI.GetListMemberTags(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetLists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ListsAPI.GetLists(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsId(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdAbuseReports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdAbuseReports(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdAbuseReportsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var reportId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdAbuseReportsId(context.Background(), listId, reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdActivity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdActivity(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdClients", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdClients(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdGrowthHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdGrowthHistory(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdGrowthHistoryId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var month string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdGrowthHistoryId(context.Background(), listId, month).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdInterestCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdInterestCategories(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdInterestCategoriesId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var interestCategoryId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdInterestCategoriesId(context.Background(), listId, interestCategoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdInterestCategoriesIdInterests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var interestCategoryId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdInterestCategoriesIdInterests(context.Background(), listId, interestCategoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdInterestCategoriesIdInterestsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var interestCategoryId string
		var interestId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdInterestCategoriesIdInterestsId(context.Background(), listId, interestCategoryId, interestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdLocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdLocations(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdMembers(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdMembersId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdMembersId(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdMembersIdActivity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdMembersIdActivity(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdMembersIdActivityFeed", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdMembersIdActivityFeed(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdMembersIdEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdMembersIdEvents(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdMembersIdGoals", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdMembersIdGoals(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdMembersIdNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdMembersIdNotes(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdMembersIdNotesId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string
		var noteId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdMembersIdNotesId(context.Background(), listId, subscriberHash, noteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdMergeFields", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdMergeFields(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdMergeFieldsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var mergeId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdMergeFieldsId(context.Background(), listId, mergeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdSegmentsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var segmentId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdSegmentsId(context.Background(), listId, segmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdSegmentsIdMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var segmentId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdSegmentsIdMembers(context.Background(), listId, segmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdSignupForms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdSignupForms(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdSurveys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		httpRes, err := apiClient.ListsAPI.GetListsIdSurveys(context.Background(), listId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdSurveysId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var surveyId string

		httpRes, err := apiClient.ListsAPI.GetListsIdSurveysId(context.Background(), listId, surveyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdWebhooks(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService GetListsIdWebhooksId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var webhookId string

		resp, httpRes, err := apiClient.ListsAPI.GetListsIdWebhooksId(context.Background(), listId, webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PatchListsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.PatchListsId(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PatchListsIdInterestCategoriesId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var interestCategoryId string

		resp, httpRes, err := apiClient.ListsAPI.PatchListsIdInterestCategoriesId(context.Background(), listId, interestCategoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PatchListsIdInterestCategoriesIdInterestsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var interestCategoryId string
		var interestId string

		resp, httpRes, err := apiClient.ListsAPI.PatchListsIdInterestCategoriesIdInterestsId(context.Background(), listId, interestCategoryId, interestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PatchListsIdMembersId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ListsAPI.PatchListsIdMembersId(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PatchListsIdMembersIdNotesId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string
		var noteId string

		resp, httpRes, err := apiClient.ListsAPI.PatchListsIdMembersIdNotesId(context.Background(), listId, subscriberHash, noteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PatchListsIdMergeFieldsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var mergeId string

		resp, httpRes, err := apiClient.ListsAPI.PatchListsIdMergeFieldsId(context.Background(), listId, mergeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PatchListsIdSegmentsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var segmentId string

		resp, httpRes, err := apiClient.ListsAPI.PatchListsIdSegmentsId(context.Background(), listId, segmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PatchListsIdWebhooksId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var webhookId string

		resp, httpRes, err := apiClient.ListsAPI.PatchListsIdWebhooksId(context.Background(), listId, webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListMemberEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		httpRes, err := apiClient.ListsAPI.PostListMemberEvents(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListMemberTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		httpRes, err := apiClient.ListsAPI.PostListMemberTags(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostLists", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ListsAPI.PostLists(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.PostListsId(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListsIdInterestCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.PostListsIdInterestCategories(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListsIdInterestCategoriesIdInterests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var interestCategoryId string

		resp, httpRes, err := apiClient.ListsAPI.PostListsIdInterestCategoriesIdInterests(context.Background(), listId, interestCategoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListsIdMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.PostListsIdMembers(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListsIdMembersHashActionsDeletePermanent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		httpRes, err := apiClient.ListsAPI.PostListsIdMembersHashActionsDeletePermanent(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListsIdMembersIdNotes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ListsAPI.PostListsIdMembersIdNotes(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListsIdMergeFields", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.PostListsIdMergeFields(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListsIdSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.PostListsIdSegments(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListsIdSegmentsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var segmentId string

		resp, httpRes, err := apiClient.ListsAPI.PostListsIdSegmentsId(context.Background(), listId, segmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListsIdSegmentsIdMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var segmentId string

		resp, httpRes, err := apiClient.ListsAPI.PostListsIdSegmentsIdMembers(context.Background(), listId, segmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListsIdSignupForms", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.PostListsIdSignupForms(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PostListsIdWebhooks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.PostListsIdWebhooks(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PreviewASegment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.PreviewASegment(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService PutListsIdMembersId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string
		var subscriberHash string

		resp, httpRes, err := apiClient.ListsAPI.PutListsIdMembersId(context.Background(), listId, subscriberHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ListsAPIService SearchTagsByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var listId string

		resp, httpRes, err := apiClient.ListsAPI.SearchTagsByName(context.Background(), listId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
