/*
Mailchimp Marketing API

Testing ReportingAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mailchimpmarketingapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Hevelop/go-client-mailchimp-marketing-api"
)

func Test_mailchimpmarketingapi_ReportingAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReportingAPIService GetReportingFacebookAds", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportingAPI.GetReportingFacebookAds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingAPIService GetReportingFacebookAdsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var outreachId string

		resp, httpRes, err := apiClient.ReportingAPI.GetReportingFacebookAdsId(context.Background(), outreachId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingAPIService GetReportingFacebookAdsIdEcommerceProductActivity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var outreachId string

		resp, httpRes, err := apiClient.ReportingAPI.GetReportingFacebookAdsIdEcommerceProductActivity(context.Background(), outreachId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingAPIService GetReportingLandingPages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportingAPI.GetReportingLandingPages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingAPIService GetReportingLandingPagesId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var outreachId string

		resp, httpRes, err := apiClient.ReportingAPI.GetReportingLandingPagesId(context.Background(), outreachId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingAPIService GetReportingSurveys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportingAPI.GetReportingSurveys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingAPIService GetReportingSurveysId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var surveyId string

		resp, httpRes, err := apiClient.ReportingAPI.GetReportingSurveysId(context.Background(), surveyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingAPIService GetReportingSurveysIdQuestions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var surveyId string

		resp, httpRes, err := apiClient.ReportingAPI.GetReportingSurveysIdQuestions(context.Background(), surveyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingAPIService GetReportingSurveysIdQuestionsId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var surveyId string
		var questionId string

		resp, httpRes, err := apiClient.ReportingAPI.GetReportingSurveysIdQuestionsId(context.Background(), surveyId, questionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingAPIService GetReportingSurveysIdQuestionsIdAnswers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var surveyId string
		var questionId string

		resp, httpRes, err := apiClient.ReportingAPI.GetReportingSurveysIdQuestionsIdAnswers(context.Background(), surveyId, questionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingAPIService GetReportingSurveysIdResponses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var surveyId string

		resp, httpRes, err := apiClient.ReportingAPI.GetReportingSurveysIdResponses(context.Background(), surveyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportingAPIService GetReportingSurveysIdResponsesId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var surveyId string
		var responseId string

		resp, httpRes, err := apiClient.ReportingAPI.GetReportingSurveysIdResponsesId(context.Background(), surveyId, responseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
