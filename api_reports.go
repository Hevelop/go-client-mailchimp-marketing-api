/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mailchimpmarketingapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


type ReportsAPI interface {

	/*
	GetReports List campaign reports

	Get campaign reports.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ReportsAPIGetReportsRequest
	*/
	GetReports(ctx context.Context) ReportsAPIGetReportsRequest

	// GetReportsExecute executes the request
	//  @return CampaignReports1
	GetReportsExecute(r ReportsAPIGetReportsRequest) (*CampaignReports1, *http.Response, error)

	/*
	GetReportsId Get campaign report

	Get report details for a specific sent campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return ReportsAPIGetReportsIdRequest
	*/
	GetReportsId(ctx context.Context, campaignId string) ReportsAPIGetReportsIdRequest

	// GetReportsIdExecute executes the request
	//  @return CampaignReport
	GetReportsIdExecute(r ReportsAPIGetReportsIdRequest) (*CampaignReport, *http.Response, error)

	/*
	GetReportsIdAbuseReportsId List abuse reports

	Get a list of abuse complaints for a specific campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return ReportsAPIGetReportsIdAbuseReportsIdRequest
	*/
	GetReportsIdAbuseReportsId(ctx context.Context, campaignId string) ReportsAPIGetReportsIdAbuseReportsIdRequest

	// GetReportsIdAbuseReportsIdExecute executes the request
	//  @return AbuseComplaints1
	GetReportsIdAbuseReportsIdExecute(r ReportsAPIGetReportsIdAbuseReportsIdRequest) (*AbuseComplaints1, *http.Response, error)

	/*
	GetReportsIdAbuseReportsIdId Get abuse report

	Get information about a specific abuse report for a campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@param reportId The id for the abuse report.
	@return ReportsAPIGetReportsIdAbuseReportsIdIdRequest
	*/
	GetReportsIdAbuseReportsIdId(ctx context.Context, campaignId string, reportId string) ReportsAPIGetReportsIdAbuseReportsIdIdRequest

	// GetReportsIdAbuseReportsIdIdExecute executes the request
	//  @return AbuseComplaint1
	GetReportsIdAbuseReportsIdIdExecute(r ReportsAPIGetReportsIdAbuseReportsIdIdRequest) (*AbuseComplaint1, *http.Response, error)

	/*
	GetReportsIdAdvice List campaign feedback

	Get feedback based on a campaign's statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return ReportsAPIGetReportsIdAdviceRequest
	*/
	GetReportsIdAdvice(ctx context.Context, campaignId string) ReportsAPIGetReportsIdAdviceRequest

	// GetReportsIdAdviceExecute executes the request
	//  @return CampaignAdviceReport
	GetReportsIdAdviceExecute(r ReportsAPIGetReportsIdAdviceRequest) (*CampaignAdviceReport, *http.Response, error)

	/*
	GetReportsIdClickDetails List campaign details

	Get information about clicks on specific links in your Mailchimp campaigns.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return ReportsAPIGetReportsIdClickDetailsRequest
	*/
	GetReportsIdClickDetails(ctx context.Context, campaignId string) ReportsAPIGetReportsIdClickDetailsRequest

	// GetReportsIdClickDetailsExecute executes the request
	//  @return ClickDetailReport
	GetReportsIdClickDetailsExecute(r ReportsAPIGetReportsIdClickDetailsRequest) (*ClickDetailReport, *http.Response, error)

	/*
	GetReportsIdClickDetailsId Get campaign link details

	Get click details for a specific link in a campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@param linkId The id for the link.
	@return ReportsAPIGetReportsIdClickDetailsIdRequest
	*/
	GetReportsIdClickDetailsId(ctx context.Context, campaignId string, linkId string) ReportsAPIGetReportsIdClickDetailsIdRequest

	// GetReportsIdClickDetailsIdExecute executes the request
	//  @return ClickDetailReport
	GetReportsIdClickDetailsIdExecute(r ReportsAPIGetReportsIdClickDetailsIdRequest) (*ClickDetailReport, *http.Response, error)

	/*
	GetReportsIdClickDetailsIdMembers List clicked link subscribers

	Get information about list members who clicked on a specific link in a campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@param linkId The id for the link.
	@return ReportsAPIGetReportsIdClickDetailsIdMembersRequest
	*/
	GetReportsIdClickDetailsIdMembers(ctx context.Context, campaignId string, linkId string) ReportsAPIGetReportsIdClickDetailsIdMembersRequest

	// GetReportsIdClickDetailsIdMembersExecute executes the request
	//  @return ClickDetailMembers
	GetReportsIdClickDetailsIdMembersExecute(r ReportsAPIGetReportsIdClickDetailsIdMembersRequest) (*ClickDetailMembers, *http.Response, error)

	/*
	GetReportsIdClickDetailsIdMembersId Get clicked link subscriber

	Get information about a specific subscriber who clicked a link in a specific campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@param linkId The id for the link.
	@param subscriberHash The MD5 hash of the lowercase version of the list member's email address.
	@return ReportsAPIGetReportsIdClickDetailsIdMembersIdRequest
	*/
	GetReportsIdClickDetailsIdMembersId(ctx context.Context, campaignId string, linkId string, subscriberHash string) ReportsAPIGetReportsIdClickDetailsIdMembersIdRequest

	// GetReportsIdClickDetailsIdMembersIdExecute executes the request
	//  @return ClickDetailMember
	GetReportsIdClickDetailsIdMembersIdExecute(r ReportsAPIGetReportsIdClickDetailsIdMembersIdRequest) (*ClickDetailMember, *http.Response, error)

	/*
	GetReportsIdDomainPerformance List domain performance stats

	Get statistics for the top-performing email domains in a campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return ReportsAPIGetReportsIdDomainPerformanceRequest
	*/
	GetReportsIdDomainPerformance(ctx context.Context, campaignId string) ReportsAPIGetReportsIdDomainPerformanceRequest

	// GetReportsIdDomainPerformanceExecute executes the request
	//  @return DomainPerformance
	GetReportsIdDomainPerformanceExecute(r ReportsAPIGetReportsIdDomainPerformanceRequest) (*DomainPerformance, *http.Response, error)

	/*
	GetReportsIdEcommerceProductActivity List campaign product activity

	Get breakdown of product activity for a campaign

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return ReportsAPIGetReportsIdEcommerceProductActivityRequest
	*/
	GetReportsIdEcommerceProductActivity(ctx context.Context, campaignId string) ReportsAPIGetReportsIdEcommerceProductActivityRequest

	// GetReportsIdEcommerceProductActivityExecute executes the request
	//  @return GetReportsIdEcommerceProductActivity200Response
	GetReportsIdEcommerceProductActivityExecute(r ReportsAPIGetReportsIdEcommerceProductActivityRequest) (*GetReportsIdEcommerceProductActivity200Response, *http.Response, error)

	/*
	GetReportsIdEepurl List EepURL activity

	Get a summary of social activity for the campaign, tracked by EepURL.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return ReportsAPIGetReportsIdEepurlRequest
	*/
	GetReportsIdEepurl(ctx context.Context, campaignId string) ReportsAPIGetReportsIdEepurlRequest

	// GetReportsIdEepurlExecute executes the request
	//  @return EepurlActivity
	GetReportsIdEepurlExecute(r ReportsAPIGetReportsIdEepurlRequest) (*EepurlActivity, *http.Response, error)

	/*
	GetReportsIdEmailActivity List email activity

	Get a list of member's subscriber activity in a specific campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return ReportsAPIGetReportsIdEmailActivityRequest
	*/
	GetReportsIdEmailActivity(ctx context.Context, campaignId string) ReportsAPIGetReportsIdEmailActivityRequest

	// GetReportsIdEmailActivityExecute executes the request
	//  @return EmailActivity
	GetReportsIdEmailActivityExecute(r ReportsAPIGetReportsIdEmailActivityRequest) (*EmailActivity, *http.Response, error)

	/*
	GetReportsIdEmailActivityId Get subscriber email activity

	Get a specific list member's activity in a campaign including opens, clicks, and bounces.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@param subscriberHash The MD5 hash of the lowercase version of the list member's email address.
	@return ReportsAPIGetReportsIdEmailActivityIdRequest
	*/
	GetReportsIdEmailActivityId(ctx context.Context, campaignId string, subscriberHash string) ReportsAPIGetReportsIdEmailActivityIdRequest

	// GetReportsIdEmailActivityIdExecute executes the request
	//  @return EmailActivity
	GetReportsIdEmailActivityIdExecute(r ReportsAPIGetReportsIdEmailActivityIdRequest) (*EmailActivity, *http.Response, error)

	/*
	GetReportsIdLocations List top open activities

	Get top open locations for a specific campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return ReportsAPIGetReportsIdLocationsRequest
	*/
	GetReportsIdLocations(ctx context.Context, campaignId string) ReportsAPIGetReportsIdLocationsRequest

	// GetReportsIdLocationsExecute executes the request
	//  @return OpenLocations
	GetReportsIdLocationsExecute(r ReportsAPIGetReportsIdLocationsRequest) (*OpenLocations, *http.Response, error)

	/*
	GetReportsIdOpenDetails List campaign open details

	Get detailed information about any campaign emails that were opened by a list member.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return ReportsAPIGetReportsIdOpenDetailsRequest
	*/
	GetReportsIdOpenDetails(ctx context.Context, campaignId string) ReportsAPIGetReportsIdOpenDetailsRequest

	// GetReportsIdOpenDetailsExecute executes the request
	//  @return OpenDetailReport
	GetReportsIdOpenDetailsExecute(r ReportsAPIGetReportsIdOpenDetailsRequest) (*OpenDetailReport, *http.Response, error)

	/*
	GetReportsIdOpenDetailsIdMembersId Get opened campaign subscriber

	Get information about a specific subscriber who opened a campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@param subscriberHash The MD5 hash of the lowercase version of the list member's email address.
	@return ReportsAPIGetReportsIdOpenDetailsIdMembersIdRequest
	*/
	GetReportsIdOpenDetailsIdMembersId(ctx context.Context, campaignId string, subscriberHash string) ReportsAPIGetReportsIdOpenDetailsIdMembersIdRequest

	// GetReportsIdOpenDetailsIdMembersIdExecute executes the request
	//  @return OpenActivity
	GetReportsIdOpenDetailsIdMembersIdExecute(r ReportsAPIGetReportsIdOpenDetailsIdMembersIdRequest) (*OpenActivity, *http.Response, error)

	/*
	GetReportsIdSentTo List campaign recipients

	Get information about campaign recipients.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return ReportsAPIGetReportsIdSentToRequest
	*/
	GetReportsIdSentTo(ctx context.Context, campaignId string) ReportsAPIGetReportsIdSentToRequest

	// GetReportsIdSentToExecute executes the request
	//  @return SentTo
	GetReportsIdSentToExecute(r ReportsAPIGetReportsIdSentToRequest) (*SentTo, *http.Response, error)

	/*
	GetReportsIdSentToId Get campaign recipient info

	Get information about a specific campaign recipient.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@param subscriberHash The MD5 hash of the lowercase version of the list member's email address.
	@return ReportsAPIGetReportsIdSentToIdRequest
	*/
	GetReportsIdSentToId(ctx context.Context, campaignId string, subscriberHash string) ReportsAPIGetReportsIdSentToIdRequest

	// GetReportsIdSentToIdExecute executes the request
	//  @return SentTo
	GetReportsIdSentToIdExecute(r ReportsAPIGetReportsIdSentToIdRequest) (*SentTo, *http.Response, error)

	/*
	GetReportsIdSubReportsId List child campaign reports

	Get a list of reports with child campaigns for a specific parent campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return ReportsAPIGetReportsIdSubReportsIdRequest
	*/
	GetReportsIdSubReportsId(ctx context.Context, campaignId string) ReportsAPIGetReportsIdSubReportsIdRequest

	// GetReportsIdSubReportsIdExecute executes the request
	//  @return CampaignSubReports
	GetReportsIdSubReportsIdExecute(r ReportsAPIGetReportsIdSubReportsIdRequest) (*CampaignSubReports, *http.Response, error)

	/*
	GetReportsIdUnsubscribed List unsubscribed members

	Get information about members who have unsubscribed from a specific campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return ReportsAPIGetReportsIdUnsubscribedRequest
	*/
	GetReportsIdUnsubscribed(ctx context.Context, campaignId string) ReportsAPIGetReportsIdUnsubscribedRequest

	// GetReportsIdUnsubscribedExecute executes the request
	//  @return Unsubscribes
	GetReportsIdUnsubscribedExecute(r ReportsAPIGetReportsIdUnsubscribedRequest) (*Unsubscribes, *http.Response, error)

	/*
	GetReportsIdUnsubscribedId Get unsubscribed member

	Get information about a specific list member who unsubscribed from a campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@param subscriberHash The MD5 hash of the lowercase version of the list member's email address.
	@return ReportsAPIGetReportsIdUnsubscribedIdRequest
	*/
	GetReportsIdUnsubscribedId(ctx context.Context, campaignId string, subscriberHash string) ReportsAPIGetReportsIdUnsubscribedIdRequest

	// GetReportsIdUnsubscribedIdExecute executes the request
	//  @return Unsubscribes
	GetReportsIdUnsubscribedIdExecute(r ReportsAPIGetReportsIdUnsubscribedIdRequest) (*Unsubscribes, *http.Response, error)
}

// ReportsAPIService ReportsAPI service
type ReportsAPIService service

type ReportsAPIGetReportsRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
	type_ *string
	beforeSendTime *time.Time
	sinceSendTime *time.Time
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsRequest) Fields(fields []string) ReportsAPIGetReportsRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ReportsAPIGetReportsRequest) Count(count int32) ReportsAPIGetReportsRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ReportsAPIGetReportsRequest) Offset(offset int32) ReportsAPIGetReportsRequest {
	r.offset = &offset
	return r
}

// The campaign type.
func (r ReportsAPIGetReportsRequest) Type_(type_ string) ReportsAPIGetReportsRequest {
	r.type_ = &type_
	return r
}

// Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r ReportsAPIGetReportsRequest) BeforeSendTime(beforeSendTime time.Time) ReportsAPIGetReportsRequest {
	r.beforeSendTime = &beforeSendTime
	return r
}

// Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r ReportsAPIGetReportsRequest) SinceSendTime(sinceSendTime time.Time) ReportsAPIGetReportsRequest {
	r.sinceSendTime = &sinceSendTime
	return r
}

func (r ReportsAPIGetReportsRequest) Execute() (*CampaignReports1, *http.Response, error) {
	return r.ApiService.GetReportsExecute(r)
}

/*
GetReports List campaign reports

Get campaign reports.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReportsAPIGetReportsRequest
*/
func (a *ReportsAPIService) GetReports(ctx context.Context) ReportsAPIGetReportsRequest {
	return ReportsAPIGetReportsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CampaignReports1
func (a *ReportsAPIService) GetReportsExecute(r ReportsAPIGetReportsRequest) (*CampaignReports1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignReports1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReports")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.beforeSendTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before_send_time", r.beforeSendTime, "")
	}
	if r.sinceSendTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "since_send_time", r.sinceSendTime, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdRequest) Fields(fields []string) ReportsAPIGetReportsIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportsAPIGetReportsIdRequest) Execute() (*CampaignReport, *http.Response, error) {
	return r.ApiService.GetReportsIdExecute(r)
}

/*
GetReportsId Get campaign report

Get report details for a specific sent campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return ReportsAPIGetReportsIdRequest
*/
func (a *ReportsAPIService) GetReportsId(ctx context.Context, campaignId string) ReportsAPIGetReportsIdRequest {
	return ReportsAPIGetReportsIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return CampaignReport
func (a *ReportsAPIService) GetReportsIdExecute(r ReportsAPIGetReportsIdRequest) (*CampaignReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdAbuseReportsIdRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdAbuseReportsIdRequest) Fields(fields []string) ReportsAPIGetReportsIdAbuseReportsIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdAbuseReportsIdRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdAbuseReportsIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportsAPIGetReportsIdAbuseReportsIdRequest) Execute() (*AbuseComplaints1, *http.Response, error) {
	return r.ApiService.GetReportsIdAbuseReportsIdExecute(r)
}

/*
GetReportsIdAbuseReportsId List abuse reports

Get a list of abuse complaints for a specific campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return ReportsAPIGetReportsIdAbuseReportsIdRequest
*/
func (a *ReportsAPIService) GetReportsIdAbuseReportsId(ctx context.Context, campaignId string) ReportsAPIGetReportsIdAbuseReportsIdRequest {
	return ReportsAPIGetReportsIdAbuseReportsIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return AbuseComplaints1
func (a *ReportsAPIService) GetReportsIdAbuseReportsIdExecute(r ReportsAPIGetReportsIdAbuseReportsIdRequest) (*AbuseComplaints1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AbuseComplaints1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdAbuseReportsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/abuse-reports"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdAbuseReportsIdIdRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	reportId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdAbuseReportsIdIdRequest) Fields(fields []string) ReportsAPIGetReportsIdAbuseReportsIdIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdAbuseReportsIdIdRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdAbuseReportsIdIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportsAPIGetReportsIdAbuseReportsIdIdRequest) Execute() (*AbuseComplaint1, *http.Response, error) {
	return r.ApiService.GetReportsIdAbuseReportsIdIdExecute(r)
}

/*
GetReportsIdAbuseReportsIdId Get abuse report

Get information about a specific abuse report for a campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @param reportId The id for the abuse report.
 @return ReportsAPIGetReportsIdAbuseReportsIdIdRequest
*/
func (a *ReportsAPIService) GetReportsIdAbuseReportsIdId(ctx context.Context, campaignId string, reportId string) ReportsAPIGetReportsIdAbuseReportsIdIdRequest {
	return ReportsAPIGetReportsIdAbuseReportsIdIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
		reportId: reportId,
	}
}

// Execute executes the request
//  @return AbuseComplaint1
func (a *ReportsAPIService) GetReportsIdAbuseReportsIdIdExecute(r ReportsAPIGetReportsIdAbuseReportsIdIdRequest) (*AbuseComplaint1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AbuseComplaint1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdAbuseReportsIdId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/abuse-reports/{report_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"report_id"+"}", url.PathEscape(parameterValueToString(r.reportId, "reportId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdAdviceRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdAdviceRequest) Fields(fields []string) ReportsAPIGetReportsIdAdviceRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdAdviceRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdAdviceRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportsAPIGetReportsIdAdviceRequest) Execute() (*CampaignAdviceReport, *http.Response, error) {
	return r.ApiService.GetReportsIdAdviceExecute(r)
}

/*
GetReportsIdAdvice List campaign feedback

Get feedback based on a campaign's statistics. Advice feedback is based on campaign stats like opens, clicks, unsubscribes, bounces, and more.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return ReportsAPIGetReportsIdAdviceRequest
*/
func (a *ReportsAPIService) GetReportsIdAdvice(ctx context.Context, campaignId string) ReportsAPIGetReportsIdAdviceRequest {
	return ReportsAPIGetReportsIdAdviceRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return CampaignAdviceReport
func (a *ReportsAPIService) GetReportsIdAdviceExecute(r ReportsAPIGetReportsIdAdviceRequest) (*CampaignAdviceReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignAdviceReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdAdvice")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/advice"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdClickDetailsRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
	sortField *string
	sortDir *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdClickDetailsRequest) Fields(fields []string) ReportsAPIGetReportsIdClickDetailsRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdClickDetailsRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdClickDetailsRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ReportsAPIGetReportsIdClickDetailsRequest) Count(count int32) ReportsAPIGetReportsIdClickDetailsRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ReportsAPIGetReportsIdClickDetailsRequest) Offset(offset int32) ReportsAPIGetReportsIdClickDetailsRequest {
	r.offset = &offset
	return r
}

// Returns click reports sorted by the specified field.
func (r ReportsAPIGetReportsIdClickDetailsRequest) SortField(sortField string) ReportsAPIGetReportsIdClickDetailsRequest {
	r.sortField = &sortField
	return r
}

// Determines the order direction for sorted results.
func (r ReportsAPIGetReportsIdClickDetailsRequest) SortDir(sortDir string) ReportsAPIGetReportsIdClickDetailsRequest {
	r.sortDir = &sortDir
	return r
}

func (r ReportsAPIGetReportsIdClickDetailsRequest) Execute() (*ClickDetailReport, *http.Response, error) {
	return r.ApiService.GetReportsIdClickDetailsExecute(r)
}

/*
GetReportsIdClickDetails List campaign details

Get information about clicks on specific links in your Mailchimp campaigns.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return ReportsAPIGetReportsIdClickDetailsRequest
*/
func (a *ReportsAPIService) GetReportsIdClickDetails(ctx context.Context, campaignId string) ReportsAPIGetReportsIdClickDetailsRequest {
	return ReportsAPIGetReportsIdClickDetailsRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return ClickDetailReport
func (a *ReportsAPIService) GetReportsIdClickDetailsExecute(r ReportsAPIGetReportsIdClickDetailsRequest) (*ClickDetailReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClickDetailReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdClickDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/click-details"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_field", r.sortField, "")
	}
	if r.sortDir != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_dir", r.sortDir, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdClickDetailsIdRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	linkId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdClickDetailsIdRequest) Fields(fields []string) ReportsAPIGetReportsIdClickDetailsIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdClickDetailsIdRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdClickDetailsIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportsAPIGetReportsIdClickDetailsIdRequest) Execute() (*ClickDetailReport, *http.Response, error) {
	return r.ApiService.GetReportsIdClickDetailsIdExecute(r)
}

/*
GetReportsIdClickDetailsId Get campaign link details

Get click details for a specific link in a campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @param linkId The id for the link.
 @return ReportsAPIGetReportsIdClickDetailsIdRequest
*/
func (a *ReportsAPIService) GetReportsIdClickDetailsId(ctx context.Context, campaignId string, linkId string) ReportsAPIGetReportsIdClickDetailsIdRequest {
	return ReportsAPIGetReportsIdClickDetailsIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
		linkId: linkId,
	}
}

// Execute executes the request
//  @return ClickDetailReport
func (a *ReportsAPIService) GetReportsIdClickDetailsIdExecute(r ReportsAPIGetReportsIdClickDetailsIdRequest) (*ClickDetailReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClickDetailReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdClickDetailsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/click-details/{link_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"link_id"+"}", url.PathEscape(parameterValueToString(r.linkId, "linkId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdClickDetailsIdMembersRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	linkId string
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdClickDetailsIdMembersRequest) Fields(fields []string) ReportsAPIGetReportsIdClickDetailsIdMembersRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdClickDetailsIdMembersRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdClickDetailsIdMembersRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ReportsAPIGetReportsIdClickDetailsIdMembersRequest) Count(count int32) ReportsAPIGetReportsIdClickDetailsIdMembersRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ReportsAPIGetReportsIdClickDetailsIdMembersRequest) Offset(offset int32) ReportsAPIGetReportsIdClickDetailsIdMembersRequest {
	r.offset = &offset
	return r
}

func (r ReportsAPIGetReportsIdClickDetailsIdMembersRequest) Execute() (*ClickDetailMembers, *http.Response, error) {
	return r.ApiService.GetReportsIdClickDetailsIdMembersExecute(r)
}

/*
GetReportsIdClickDetailsIdMembers List clicked link subscribers

Get information about list members who clicked on a specific link in a campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @param linkId The id for the link.
 @return ReportsAPIGetReportsIdClickDetailsIdMembersRequest
*/
func (a *ReportsAPIService) GetReportsIdClickDetailsIdMembers(ctx context.Context, campaignId string, linkId string) ReportsAPIGetReportsIdClickDetailsIdMembersRequest {
	return ReportsAPIGetReportsIdClickDetailsIdMembersRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
		linkId: linkId,
	}
}

// Execute executes the request
//  @return ClickDetailMembers
func (a *ReportsAPIService) GetReportsIdClickDetailsIdMembersExecute(r ReportsAPIGetReportsIdClickDetailsIdMembersRequest) (*ClickDetailMembers, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClickDetailMembers
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdClickDetailsIdMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/click-details/{link_id}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"link_id"+"}", url.PathEscape(parameterValueToString(r.linkId, "linkId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdClickDetailsIdMembersIdRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	linkId string
	subscriberHash string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdClickDetailsIdMembersIdRequest) Fields(fields []string) ReportsAPIGetReportsIdClickDetailsIdMembersIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdClickDetailsIdMembersIdRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdClickDetailsIdMembersIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportsAPIGetReportsIdClickDetailsIdMembersIdRequest) Execute() (*ClickDetailMember, *http.Response, error) {
	return r.ApiService.GetReportsIdClickDetailsIdMembersIdExecute(r)
}

/*
GetReportsIdClickDetailsIdMembersId Get clicked link subscriber

Get information about a specific subscriber who clicked a link in a specific campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @param linkId The id for the link.
 @param subscriberHash The MD5 hash of the lowercase version of the list member's email address.
 @return ReportsAPIGetReportsIdClickDetailsIdMembersIdRequest
*/
func (a *ReportsAPIService) GetReportsIdClickDetailsIdMembersId(ctx context.Context, campaignId string, linkId string, subscriberHash string) ReportsAPIGetReportsIdClickDetailsIdMembersIdRequest {
	return ReportsAPIGetReportsIdClickDetailsIdMembersIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
		linkId: linkId,
		subscriberHash: subscriberHash,
	}
}

// Execute executes the request
//  @return ClickDetailMember
func (a *ReportsAPIService) GetReportsIdClickDetailsIdMembersIdExecute(r ReportsAPIGetReportsIdClickDetailsIdMembersIdRequest) (*ClickDetailMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClickDetailMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdClickDetailsIdMembersId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/click-details/{link_id}/members/{subscriber_hash}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"link_id"+"}", url.PathEscape(parameterValueToString(r.linkId, "linkId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriber_hash"+"}", url.PathEscape(parameterValueToString(r.subscriberHash, "subscriberHash")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdDomainPerformanceRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdDomainPerformanceRequest) Fields(fields []string) ReportsAPIGetReportsIdDomainPerformanceRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdDomainPerformanceRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdDomainPerformanceRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportsAPIGetReportsIdDomainPerformanceRequest) Execute() (*DomainPerformance, *http.Response, error) {
	return r.ApiService.GetReportsIdDomainPerformanceExecute(r)
}

/*
GetReportsIdDomainPerformance List domain performance stats

Get statistics for the top-performing email domains in a campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return ReportsAPIGetReportsIdDomainPerformanceRequest
*/
func (a *ReportsAPIService) GetReportsIdDomainPerformance(ctx context.Context, campaignId string) ReportsAPIGetReportsIdDomainPerformanceRequest {
	return ReportsAPIGetReportsIdDomainPerformanceRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return DomainPerformance
func (a *ReportsAPIService) GetReportsIdDomainPerformanceExecute(r ReportsAPIGetReportsIdDomainPerformanceRequest) (*DomainPerformance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DomainPerformance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdDomainPerformance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/domain-performance"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdEcommerceProductActivityRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
	sortField *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdEcommerceProductActivityRequest) Fields(fields []string) ReportsAPIGetReportsIdEcommerceProductActivityRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdEcommerceProductActivityRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdEcommerceProductActivityRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ReportsAPIGetReportsIdEcommerceProductActivityRequest) Count(count int32) ReportsAPIGetReportsIdEcommerceProductActivityRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ReportsAPIGetReportsIdEcommerceProductActivityRequest) Offset(offset int32) ReportsAPIGetReportsIdEcommerceProductActivityRequest {
	r.offset = &offset
	return r
}

// Returns files sorted by the specified field.
func (r ReportsAPIGetReportsIdEcommerceProductActivityRequest) SortField(sortField string) ReportsAPIGetReportsIdEcommerceProductActivityRequest {
	r.sortField = &sortField
	return r
}

func (r ReportsAPIGetReportsIdEcommerceProductActivityRequest) Execute() (*GetReportsIdEcommerceProductActivity200Response, *http.Response, error) {
	return r.ApiService.GetReportsIdEcommerceProductActivityExecute(r)
}

/*
GetReportsIdEcommerceProductActivity List campaign product activity

Get breakdown of product activity for a campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return ReportsAPIGetReportsIdEcommerceProductActivityRequest
*/
func (a *ReportsAPIService) GetReportsIdEcommerceProductActivity(ctx context.Context, campaignId string) ReportsAPIGetReportsIdEcommerceProductActivityRequest {
	return ReportsAPIGetReportsIdEcommerceProductActivityRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return GetReportsIdEcommerceProductActivity200Response
func (a *ReportsAPIService) GetReportsIdEcommerceProductActivityExecute(r ReportsAPIGetReportsIdEcommerceProductActivityRequest) (*GetReportsIdEcommerceProductActivity200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportsIdEcommerceProductActivity200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdEcommerceProductActivity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/ecommerce-product-activity"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_field", r.sortField, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdEepurlRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdEepurlRequest) Fields(fields []string) ReportsAPIGetReportsIdEepurlRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdEepurlRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdEepurlRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportsAPIGetReportsIdEepurlRequest) Execute() (*EepurlActivity, *http.Response, error) {
	return r.ApiService.GetReportsIdEepurlExecute(r)
}

/*
GetReportsIdEepurl List EepURL activity

Get a summary of social activity for the campaign, tracked by EepURL.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return ReportsAPIGetReportsIdEepurlRequest
*/
func (a *ReportsAPIService) GetReportsIdEepurl(ctx context.Context, campaignId string) ReportsAPIGetReportsIdEepurlRequest {
	return ReportsAPIGetReportsIdEepurlRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return EepurlActivity
func (a *ReportsAPIService) GetReportsIdEepurlExecute(r ReportsAPIGetReportsIdEepurlRequest) (*EepurlActivity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EepurlActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdEepurl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/eepurl"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdEmailActivityRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
	since *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdEmailActivityRequest) Fields(fields []string) ReportsAPIGetReportsIdEmailActivityRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdEmailActivityRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdEmailActivityRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ReportsAPIGetReportsIdEmailActivityRequest) Count(count int32) ReportsAPIGetReportsIdEmailActivityRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ReportsAPIGetReportsIdEmailActivityRequest) Offset(offset int32) ReportsAPIGetReportsIdEmailActivityRequest {
	r.offset = &offset
	return r
}

// Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r ReportsAPIGetReportsIdEmailActivityRequest) Since(since string) ReportsAPIGetReportsIdEmailActivityRequest {
	r.since = &since
	return r
}

func (r ReportsAPIGetReportsIdEmailActivityRequest) Execute() (*EmailActivity, *http.Response, error) {
	return r.ApiService.GetReportsIdEmailActivityExecute(r)
}

/*
GetReportsIdEmailActivity List email activity

Get a list of member's subscriber activity in a specific campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return ReportsAPIGetReportsIdEmailActivityRequest
*/
func (a *ReportsAPIService) GetReportsIdEmailActivity(ctx context.Context, campaignId string) ReportsAPIGetReportsIdEmailActivityRequest {
	return ReportsAPIGetReportsIdEmailActivityRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return EmailActivity
func (a *ReportsAPIService) GetReportsIdEmailActivityExecute(r ReportsAPIGetReportsIdEmailActivityRequest) (*EmailActivity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdEmailActivity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/email-activity"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.since != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "since", r.since, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdEmailActivityIdRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	subscriberHash string
	fields *[]string
	excludeFields *[]string
	since *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdEmailActivityIdRequest) Fields(fields []string) ReportsAPIGetReportsIdEmailActivityIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdEmailActivityIdRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdEmailActivityIdRequest {
	r.excludeFields = &excludeFields
	return r
}

// Restrict results to email activity events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r ReportsAPIGetReportsIdEmailActivityIdRequest) Since(since string) ReportsAPIGetReportsIdEmailActivityIdRequest {
	r.since = &since
	return r
}

func (r ReportsAPIGetReportsIdEmailActivityIdRequest) Execute() (*EmailActivity, *http.Response, error) {
	return r.ApiService.GetReportsIdEmailActivityIdExecute(r)
}

/*
GetReportsIdEmailActivityId Get subscriber email activity

Get a specific list member's activity in a campaign including opens, clicks, and bounces.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @param subscriberHash The MD5 hash of the lowercase version of the list member's email address.
 @return ReportsAPIGetReportsIdEmailActivityIdRequest
*/
func (a *ReportsAPIService) GetReportsIdEmailActivityId(ctx context.Context, campaignId string, subscriberHash string) ReportsAPIGetReportsIdEmailActivityIdRequest {
	return ReportsAPIGetReportsIdEmailActivityIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
		subscriberHash: subscriberHash,
	}
}

// Execute executes the request
//  @return EmailActivity
func (a *ReportsAPIService) GetReportsIdEmailActivityIdExecute(r ReportsAPIGetReportsIdEmailActivityIdRequest) (*EmailActivity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdEmailActivityId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/email-activity/{subscriber_hash}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriber_hash"+"}", url.PathEscape(parameterValueToString(r.subscriberHash, "subscriberHash")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.since != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "since", r.since, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdLocationsRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdLocationsRequest) Fields(fields []string) ReportsAPIGetReportsIdLocationsRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdLocationsRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdLocationsRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ReportsAPIGetReportsIdLocationsRequest) Count(count int32) ReportsAPIGetReportsIdLocationsRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ReportsAPIGetReportsIdLocationsRequest) Offset(offset int32) ReportsAPIGetReportsIdLocationsRequest {
	r.offset = &offset
	return r
}

func (r ReportsAPIGetReportsIdLocationsRequest) Execute() (*OpenLocations, *http.Response, error) {
	return r.ApiService.GetReportsIdLocationsExecute(r)
}

/*
GetReportsIdLocations List top open activities

Get top open locations for a specific campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return ReportsAPIGetReportsIdLocationsRequest
*/
func (a *ReportsAPIService) GetReportsIdLocations(ctx context.Context, campaignId string) ReportsAPIGetReportsIdLocationsRequest {
	return ReportsAPIGetReportsIdLocationsRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return OpenLocations
func (a *ReportsAPIService) GetReportsIdLocationsExecute(r ReportsAPIGetReportsIdLocationsRequest) (*OpenLocations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpenLocations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdLocations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/locations"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdOpenDetailsRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
	since *string
	sortField *string
	sortDir *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdOpenDetailsRequest) Fields(fields []string) ReportsAPIGetReportsIdOpenDetailsRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdOpenDetailsRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdOpenDetailsRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ReportsAPIGetReportsIdOpenDetailsRequest) Count(count int32) ReportsAPIGetReportsIdOpenDetailsRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ReportsAPIGetReportsIdOpenDetailsRequest) Offset(offset int32) ReportsAPIGetReportsIdOpenDetailsRequest {
	r.offset = &offset
	return r
}

// Restrict results to campaign open events that occur after a specific time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r ReportsAPIGetReportsIdOpenDetailsRequest) Since(since string) ReportsAPIGetReportsIdOpenDetailsRequest {
	r.since = &since
	return r
}

// Returns open reports sorted by the specified field.
func (r ReportsAPIGetReportsIdOpenDetailsRequest) SortField(sortField string) ReportsAPIGetReportsIdOpenDetailsRequest {
	r.sortField = &sortField
	return r
}

// Determines the order direction for sorted results.
func (r ReportsAPIGetReportsIdOpenDetailsRequest) SortDir(sortDir string) ReportsAPIGetReportsIdOpenDetailsRequest {
	r.sortDir = &sortDir
	return r
}

func (r ReportsAPIGetReportsIdOpenDetailsRequest) Execute() (*OpenDetailReport, *http.Response, error) {
	return r.ApiService.GetReportsIdOpenDetailsExecute(r)
}

/*
GetReportsIdOpenDetails List campaign open details

Get detailed information about any campaign emails that were opened by a list member.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return ReportsAPIGetReportsIdOpenDetailsRequest
*/
func (a *ReportsAPIService) GetReportsIdOpenDetails(ctx context.Context, campaignId string) ReportsAPIGetReportsIdOpenDetailsRequest {
	return ReportsAPIGetReportsIdOpenDetailsRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return OpenDetailReport
func (a *ReportsAPIService) GetReportsIdOpenDetailsExecute(r ReportsAPIGetReportsIdOpenDetailsRequest) (*OpenDetailReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpenDetailReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdOpenDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/open-details"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.since != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "since", r.since, "")
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_field", r.sortField, "")
	}
	if r.sortDir != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_dir", r.sortDir, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdOpenDetailsIdMembersIdRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	subscriberHash string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdOpenDetailsIdMembersIdRequest) Fields(fields []string) ReportsAPIGetReportsIdOpenDetailsIdMembersIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdOpenDetailsIdMembersIdRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdOpenDetailsIdMembersIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportsAPIGetReportsIdOpenDetailsIdMembersIdRequest) Execute() (*OpenActivity, *http.Response, error) {
	return r.ApiService.GetReportsIdOpenDetailsIdMembersIdExecute(r)
}

/*
GetReportsIdOpenDetailsIdMembersId Get opened campaign subscriber

Get information about a specific subscriber who opened a campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @param subscriberHash The MD5 hash of the lowercase version of the list member's email address.
 @return ReportsAPIGetReportsIdOpenDetailsIdMembersIdRequest
*/
func (a *ReportsAPIService) GetReportsIdOpenDetailsIdMembersId(ctx context.Context, campaignId string, subscriberHash string) ReportsAPIGetReportsIdOpenDetailsIdMembersIdRequest {
	return ReportsAPIGetReportsIdOpenDetailsIdMembersIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
		subscriberHash: subscriberHash,
	}
}

// Execute executes the request
//  @return OpenActivity
func (a *ReportsAPIService) GetReportsIdOpenDetailsIdMembersIdExecute(r ReportsAPIGetReportsIdOpenDetailsIdMembersIdRequest) (*OpenActivity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpenActivity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdOpenDetailsIdMembersId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/open-details/{subscriber_hash}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriber_hash"+"}", url.PathEscape(parameterValueToString(r.subscriberHash, "subscriberHash")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdSentToRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdSentToRequest) Fields(fields []string) ReportsAPIGetReportsIdSentToRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdSentToRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdSentToRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ReportsAPIGetReportsIdSentToRequest) Count(count int32) ReportsAPIGetReportsIdSentToRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ReportsAPIGetReportsIdSentToRequest) Offset(offset int32) ReportsAPIGetReportsIdSentToRequest {
	r.offset = &offset
	return r
}

func (r ReportsAPIGetReportsIdSentToRequest) Execute() (*SentTo, *http.Response, error) {
	return r.ApiService.GetReportsIdSentToExecute(r)
}

/*
GetReportsIdSentTo List campaign recipients

Get information about campaign recipients.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return ReportsAPIGetReportsIdSentToRequest
*/
func (a *ReportsAPIService) GetReportsIdSentTo(ctx context.Context, campaignId string) ReportsAPIGetReportsIdSentToRequest {
	return ReportsAPIGetReportsIdSentToRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return SentTo
func (a *ReportsAPIService) GetReportsIdSentToExecute(r ReportsAPIGetReportsIdSentToRequest) (*SentTo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SentTo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdSentTo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/sent-to"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdSentToIdRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	subscriberHash string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdSentToIdRequest) Fields(fields []string) ReportsAPIGetReportsIdSentToIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdSentToIdRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdSentToIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportsAPIGetReportsIdSentToIdRequest) Execute() (*SentTo, *http.Response, error) {
	return r.ApiService.GetReportsIdSentToIdExecute(r)
}

/*
GetReportsIdSentToId Get campaign recipient info

Get information about a specific campaign recipient.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @param subscriberHash The MD5 hash of the lowercase version of the list member's email address.
 @return ReportsAPIGetReportsIdSentToIdRequest
*/
func (a *ReportsAPIService) GetReportsIdSentToId(ctx context.Context, campaignId string, subscriberHash string) ReportsAPIGetReportsIdSentToIdRequest {
	return ReportsAPIGetReportsIdSentToIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
		subscriberHash: subscriberHash,
	}
}

// Execute executes the request
//  @return SentTo
func (a *ReportsAPIService) GetReportsIdSentToIdExecute(r ReportsAPIGetReportsIdSentToIdRequest) (*SentTo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SentTo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdSentToId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/sent-to/{subscriber_hash}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriber_hash"+"}", url.PathEscape(parameterValueToString(r.subscriberHash, "subscriberHash")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdSubReportsIdRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdSubReportsIdRequest) Fields(fields []string) ReportsAPIGetReportsIdSubReportsIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdSubReportsIdRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdSubReportsIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportsAPIGetReportsIdSubReportsIdRequest) Execute() (*CampaignSubReports, *http.Response, error) {
	return r.ApiService.GetReportsIdSubReportsIdExecute(r)
}

/*
GetReportsIdSubReportsId List child campaign reports

Get a list of reports with child campaigns for a specific parent campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return ReportsAPIGetReportsIdSubReportsIdRequest
*/
func (a *ReportsAPIService) GetReportsIdSubReportsId(ctx context.Context, campaignId string) ReportsAPIGetReportsIdSubReportsIdRequest {
	return ReportsAPIGetReportsIdSubReportsIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return CampaignSubReports
func (a *ReportsAPIService) GetReportsIdSubReportsIdExecute(r ReportsAPIGetReportsIdSubReportsIdRequest) (*CampaignSubReports, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignSubReports
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdSubReportsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/sub-reports"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdUnsubscribedRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdUnsubscribedRequest) Fields(fields []string) ReportsAPIGetReportsIdUnsubscribedRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdUnsubscribedRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdUnsubscribedRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ReportsAPIGetReportsIdUnsubscribedRequest) Count(count int32) ReportsAPIGetReportsIdUnsubscribedRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ReportsAPIGetReportsIdUnsubscribedRequest) Offset(offset int32) ReportsAPIGetReportsIdUnsubscribedRequest {
	r.offset = &offset
	return r
}

func (r ReportsAPIGetReportsIdUnsubscribedRequest) Execute() (*Unsubscribes, *http.Response, error) {
	return r.ApiService.GetReportsIdUnsubscribedExecute(r)
}

/*
GetReportsIdUnsubscribed List unsubscribed members

Get information about members who have unsubscribed from a specific campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return ReportsAPIGetReportsIdUnsubscribedRequest
*/
func (a *ReportsAPIService) GetReportsIdUnsubscribed(ctx context.Context, campaignId string) ReportsAPIGetReportsIdUnsubscribedRequest {
	return ReportsAPIGetReportsIdUnsubscribedRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return Unsubscribes
func (a *ReportsAPIService) GetReportsIdUnsubscribedExecute(r ReportsAPIGetReportsIdUnsubscribedRequest) (*Unsubscribes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Unsubscribes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdUnsubscribed")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/unsubscribed"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportsAPIGetReportsIdUnsubscribedIdRequest struct {
	ctx context.Context
	ApiService ReportsAPI
	campaignId string
	subscriberHash string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdUnsubscribedIdRequest) Fields(fields []string) ReportsAPIGetReportsIdUnsubscribedIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportsAPIGetReportsIdUnsubscribedIdRequest) ExcludeFields(excludeFields []string) ReportsAPIGetReportsIdUnsubscribedIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportsAPIGetReportsIdUnsubscribedIdRequest) Execute() (*Unsubscribes, *http.Response, error) {
	return r.ApiService.GetReportsIdUnsubscribedIdExecute(r)
}

/*
GetReportsIdUnsubscribedId Get unsubscribed member

Get information about a specific list member who unsubscribed from a campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @param subscriberHash The MD5 hash of the lowercase version of the list member's email address.
 @return ReportsAPIGetReportsIdUnsubscribedIdRequest
*/
func (a *ReportsAPIService) GetReportsIdUnsubscribedId(ctx context.Context, campaignId string, subscriberHash string) ReportsAPIGetReportsIdUnsubscribedIdRequest {
	return ReportsAPIGetReportsIdUnsubscribedIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
		subscriberHash: subscriberHash,
	}
}

// Execute executes the request
//  @return Unsubscribes
func (a *ReportsAPIService) GetReportsIdUnsubscribedIdExecute(r ReportsAPIGetReportsIdUnsubscribedIdRequest) (*Unsubscribes, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Unsubscribes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetReportsIdUnsubscribedId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/{campaign_id}/unsubscribed/{subscriber_hash}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriber_hash"+"}", url.PathEscape(parameterValueToString(r.subscriberHash, "subscriberHash")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
