/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mailchimpmarketingapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


type CampaignsAPI interface {

	/*
	DeleteCampaignsId Delete campaign

	Remove a campaign from your Mailchimp account.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIDeleteCampaignsIdRequest
	*/
	DeleteCampaignsId(ctx context.Context, campaignId string) CampaignsAPIDeleteCampaignsIdRequest

	// DeleteCampaignsIdExecute executes the request
	DeleteCampaignsIdExecute(r CampaignsAPIDeleteCampaignsIdRequest) (*http.Response, error)

	/*
	DeleteCampaignsIdFeedbackId Delete campaign feedback message

	Remove a specific feedback message for a campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@param feedbackId The unique id for the feedback message.
	@return CampaignsAPIDeleteCampaignsIdFeedbackIdRequest
	*/
	DeleteCampaignsIdFeedbackId(ctx context.Context, campaignId string, feedbackId string) CampaignsAPIDeleteCampaignsIdFeedbackIdRequest

	// DeleteCampaignsIdFeedbackIdExecute executes the request
	DeleteCampaignsIdFeedbackIdExecute(r CampaignsAPIDeleteCampaignsIdFeedbackIdRequest) (*http.Response, error)

	/*
	GetCampaigns List campaigns

	Get all campaigns in an account.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CampaignsAPIGetCampaignsRequest
	*/
	GetCampaigns(ctx context.Context) CampaignsAPIGetCampaignsRequest

	// GetCampaignsExecute executes the request
	//  @return GetCampaigns200Response
	GetCampaignsExecute(r CampaignsAPIGetCampaignsRequest) (*GetCampaigns200Response, *http.Response, error)

	/*
	GetCampaignsId Get campaign info

	Get information about a specific campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIGetCampaignsIdRequest
	*/
	GetCampaignsId(ctx context.Context, campaignId string) CampaignsAPIGetCampaignsIdRequest

	// GetCampaignsIdExecute executes the request
	//  @return Campaign
	GetCampaignsIdExecute(r CampaignsAPIGetCampaignsIdRequest) (*Campaign, *http.Response, error)

	/*
	GetCampaignsIdContent Get campaign content

	Get the the HTML and plain-text content for a campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIGetCampaignsIdContentRequest
	*/
	GetCampaignsIdContent(ctx context.Context, campaignId string) CampaignsAPIGetCampaignsIdContentRequest

	// GetCampaignsIdContentExecute executes the request
	//  @return CampaignContent
	GetCampaignsIdContentExecute(r CampaignsAPIGetCampaignsIdContentRequest) (*CampaignContent, *http.Response, error)

	/*
	GetCampaignsIdFeedback List campaign feedback

	Get team feedback while you're working together on a Mailchimp campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIGetCampaignsIdFeedbackRequest
	*/
	GetCampaignsIdFeedback(ctx context.Context, campaignId string) CampaignsAPIGetCampaignsIdFeedbackRequest

	// GetCampaignsIdFeedbackExecute executes the request
	//  @return CampaignReports
	GetCampaignsIdFeedbackExecute(r CampaignsAPIGetCampaignsIdFeedbackRequest) (*CampaignReports, *http.Response, error)

	/*
	GetCampaignsIdFeedbackId Get campaign feedback message

	Get a specific feedback message from a campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@param feedbackId The unique id for the feedback message.
	@return CampaignsAPIGetCampaignsIdFeedbackIdRequest
	*/
	GetCampaignsIdFeedbackId(ctx context.Context, campaignId string, feedbackId string) CampaignsAPIGetCampaignsIdFeedbackIdRequest

	// GetCampaignsIdFeedbackIdExecute executes the request
	//  @return CampaignFeedback2
	GetCampaignsIdFeedbackIdExecute(r CampaignsAPIGetCampaignsIdFeedbackIdRequest) (*CampaignFeedback2, *http.Response, error)

	/*
	GetCampaignsIdSendChecklist Get campaign send checklist

	Review the send checklist for a campaign, and resolve any issues before sending.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIGetCampaignsIdSendChecklistRequest
	*/
	GetCampaignsIdSendChecklist(ctx context.Context, campaignId string) CampaignsAPIGetCampaignsIdSendChecklistRequest

	// GetCampaignsIdSendChecklistExecute executes the request
	//  @return SendChecklist
	GetCampaignsIdSendChecklistExecute(r CampaignsAPIGetCampaignsIdSendChecklistRequest) (*SendChecklist, *http.Response, error)

	/*
	PatchCampaignsId Update campaign settings

	Update some or all of the settings for a specific campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIPatchCampaignsIdRequest
	*/
	PatchCampaignsId(ctx context.Context, campaignId string) CampaignsAPIPatchCampaignsIdRequest

	// PatchCampaignsIdExecute executes the request
	//  @return Campaign
	PatchCampaignsIdExecute(r CampaignsAPIPatchCampaignsIdRequest) (*Campaign, *http.Response, error)

	/*
	PatchCampaignsIdFeedbackId Update campaign feedback message

	Update a specific feedback message for a campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@param feedbackId The unique id for the feedback message.
	@return CampaignsAPIPatchCampaignsIdFeedbackIdRequest
	*/
	PatchCampaignsIdFeedbackId(ctx context.Context, campaignId string, feedbackId string) CampaignsAPIPatchCampaignsIdFeedbackIdRequest

	// PatchCampaignsIdFeedbackIdExecute executes the request
	//  @return CampaignFeedback2
	PatchCampaignsIdFeedbackIdExecute(r CampaignsAPIPatchCampaignsIdFeedbackIdRequest) (*CampaignFeedback2, *http.Response, error)

	/*
	PostCampaigns Add campaign

	Create a new Mailchimp campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CampaignsAPIPostCampaignsRequest
	*/
	PostCampaigns(ctx context.Context) CampaignsAPIPostCampaignsRequest

	// PostCampaignsExecute executes the request
	//  @return Campaign
	PostCampaignsExecute(r CampaignsAPIPostCampaignsRequest) (*Campaign, *http.Response, error)

	/*
	PostCampaignsIdActionsCancelSend Cancel campaign

	Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIPostCampaignsIdActionsCancelSendRequest
	*/
	PostCampaignsIdActionsCancelSend(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsCancelSendRequest

	// PostCampaignsIdActionsCancelSendExecute executes the request
	PostCampaignsIdActionsCancelSendExecute(r CampaignsAPIPostCampaignsIdActionsCancelSendRequest) (*http.Response, error)

	/*
	PostCampaignsIdActionsCreateResend Resend campaign

	Remove the guesswork for resending a campaign to certain segments. You can use this endpoint as a shortcut to replicate a campaign and resend it to common segments, such as those who didn't open the campaign, or any new subscribers since it was sent.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIPostCampaignsIdActionsCreateResendRequest
	*/
	PostCampaignsIdActionsCreateResend(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsCreateResendRequest

	// PostCampaignsIdActionsCreateResendExecute executes the request
	//  @return Campaign3
	PostCampaignsIdActionsCreateResendExecute(r CampaignsAPIPostCampaignsIdActionsCreateResendRequest) (*Campaign3, *http.Response, error)

	/*
	PostCampaignsIdActionsPause Pause rss campaign

	Pause an RSS-Driven campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIPostCampaignsIdActionsPauseRequest
	*/
	PostCampaignsIdActionsPause(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsPauseRequest

	// PostCampaignsIdActionsPauseExecute executes the request
	PostCampaignsIdActionsPauseExecute(r CampaignsAPIPostCampaignsIdActionsPauseRequest) (*http.Response, error)

	/*
	PostCampaignsIdActionsReplicate Replicate campaign

	Replicate a campaign in saved or send status.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIPostCampaignsIdActionsReplicateRequest
	*/
	PostCampaignsIdActionsReplicate(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsReplicateRequest

	// PostCampaignsIdActionsReplicateExecute executes the request
	//  @return Campaign3
	PostCampaignsIdActionsReplicateExecute(r CampaignsAPIPostCampaignsIdActionsReplicateRequest) (*Campaign3, *http.Response, error)

	/*
	PostCampaignsIdActionsResume Resume rss campaign

	Resume an RSS-Driven campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIPostCampaignsIdActionsResumeRequest
	*/
	PostCampaignsIdActionsResume(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsResumeRequest

	// PostCampaignsIdActionsResumeExecute executes the request
	PostCampaignsIdActionsResumeExecute(r CampaignsAPIPostCampaignsIdActionsResumeRequest) (*http.Response, error)

	/*
	PostCampaignsIdActionsSchedule Schedule campaign

	Schedule a campaign for delivery. If you're using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIPostCampaignsIdActionsScheduleRequest
	*/
	PostCampaignsIdActionsSchedule(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsScheduleRequest

	// PostCampaignsIdActionsScheduleExecute executes the request
	PostCampaignsIdActionsScheduleExecute(r CampaignsAPIPostCampaignsIdActionsScheduleRequest) (*http.Response, error)

	/*
	PostCampaignsIdActionsSend Send campaign

	Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIPostCampaignsIdActionsSendRequest
	*/
	PostCampaignsIdActionsSend(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsSendRequest

	// PostCampaignsIdActionsSendExecute executes the request
	PostCampaignsIdActionsSendExecute(r CampaignsAPIPostCampaignsIdActionsSendRequest) (*http.Response, error)

	/*
	PostCampaignsIdActionsTest Send test email

	Send a test email.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIPostCampaignsIdActionsTestRequest
	*/
	PostCampaignsIdActionsTest(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsTestRequest

	// PostCampaignsIdActionsTestExecute executes the request
	PostCampaignsIdActionsTestExecute(r CampaignsAPIPostCampaignsIdActionsTestRequest) (*http.Response, error)

	/*
	PostCampaignsIdActionsUnschedule Unschedule campaign

	Unschedule a scheduled campaign that hasn't started sending.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIPostCampaignsIdActionsUnscheduleRequest
	*/
	PostCampaignsIdActionsUnschedule(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsUnscheduleRequest

	// PostCampaignsIdActionsUnscheduleExecute executes the request
	PostCampaignsIdActionsUnscheduleExecute(r CampaignsAPIPostCampaignsIdActionsUnscheduleRequest) (*http.Response, error)

	/*
	PostCampaignsIdFeedback Add campaign feedback

	Add feedback on a specific campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIPostCampaignsIdFeedbackRequest
	*/
	PostCampaignsIdFeedback(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdFeedbackRequest

	// PostCampaignsIdFeedbackExecute executes the request
	//  @return CampaignFeedback2
	PostCampaignsIdFeedbackExecute(r CampaignsAPIPostCampaignsIdFeedbackRequest) (*CampaignFeedback2, *http.Response, error)

	/*
	PutCampaignsIdContent Set campaign content

	Set the content for a campaign.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param campaignId The unique id for the campaign.
	@return CampaignsAPIPutCampaignsIdContentRequest
	*/
	PutCampaignsIdContent(ctx context.Context, campaignId string) CampaignsAPIPutCampaignsIdContentRequest

	// PutCampaignsIdContentExecute executes the request
	//  @return CampaignContent
	PutCampaignsIdContentExecute(r CampaignsAPIPutCampaignsIdContentRequest) (*CampaignContent, *http.Response, error)
}

// CampaignsAPIService CampaignsAPI service
type CampaignsAPIService service

type CampaignsAPIDeleteCampaignsIdRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
}

func (r CampaignsAPIDeleteCampaignsIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCampaignsIdExecute(r)
}

/*
DeleteCampaignsId Delete campaign

Remove a campaign from your Mailchimp account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIDeleteCampaignsIdRequest
*/
func (a *CampaignsAPIService) DeleteCampaignsId(ctx context.Context, campaignId string) CampaignsAPIDeleteCampaignsIdRequest {
	return CampaignsAPIDeleteCampaignsIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
func (a *CampaignsAPIService) DeleteCampaignsIdExecute(r CampaignsAPIDeleteCampaignsIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.DeleteCampaignsId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CampaignsAPIDeleteCampaignsIdFeedbackIdRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
	feedbackId string
}

func (r CampaignsAPIDeleteCampaignsIdFeedbackIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCampaignsIdFeedbackIdExecute(r)
}

/*
DeleteCampaignsIdFeedbackId Delete campaign feedback message

Remove a specific feedback message for a campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @param feedbackId The unique id for the feedback message.
 @return CampaignsAPIDeleteCampaignsIdFeedbackIdRequest
*/
func (a *CampaignsAPIService) DeleteCampaignsIdFeedbackId(ctx context.Context, campaignId string, feedbackId string) CampaignsAPIDeleteCampaignsIdFeedbackIdRequest {
	return CampaignsAPIDeleteCampaignsIdFeedbackIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
		feedbackId: feedbackId,
	}
}

// Execute executes the request
func (a *CampaignsAPIService) DeleteCampaignsIdFeedbackIdExecute(r CampaignsAPIDeleteCampaignsIdFeedbackIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.DeleteCampaignsIdFeedbackId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/feedback/{feedback_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"feedback_id"+"}", url.PathEscape(parameterValueToString(r.feedbackId, "feedbackId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CampaignsAPIGetCampaignsRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
	type_ *string
	status *string
	beforeSendTime *time.Time
	sinceSendTime *time.Time
	beforeCreateTime *time.Time
	sinceCreateTime *time.Time
	listId *string
	folderId *string
	memberId *string
	sortField *string
	sortDir *string
	includeResendShortcutEligibility *bool
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r CampaignsAPIGetCampaignsRequest) Fields(fields []string) CampaignsAPIGetCampaignsRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r CampaignsAPIGetCampaignsRequest) ExcludeFields(excludeFields []string) CampaignsAPIGetCampaignsRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r CampaignsAPIGetCampaignsRequest) Count(count int32) CampaignsAPIGetCampaignsRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r CampaignsAPIGetCampaignsRequest) Offset(offset int32) CampaignsAPIGetCampaignsRequest {
	r.offset = &offset
	return r
}

// The campaign type.
func (r CampaignsAPIGetCampaignsRequest) Type_(type_ string) CampaignsAPIGetCampaignsRequest {
	r.type_ = &type_
	return r
}

// The status of the campaign.
func (r CampaignsAPIGetCampaignsRequest) Status(status string) CampaignsAPIGetCampaignsRequest {
	r.status = &status
	return r
}

// Restrict the response to campaigns sent before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r CampaignsAPIGetCampaignsRequest) BeforeSendTime(beforeSendTime time.Time) CampaignsAPIGetCampaignsRequest {
	r.beforeSendTime = &beforeSendTime
	return r
}

// Restrict the response to campaigns sent after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r CampaignsAPIGetCampaignsRequest) SinceSendTime(sinceSendTime time.Time) CampaignsAPIGetCampaignsRequest {
	r.sinceSendTime = &sinceSendTime
	return r
}

// Restrict the response to campaigns created before the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r CampaignsAPIGetCampaignsRequest) BeforeCreateTime(beforeCreateTime time.Time) CampaignsAPIGetCampaignsRequest {
	r.beforeCreateTime = &beforeCreateTime
	return r
}

// Restrict the response to campaigns created after the set time. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r CampaignsAPIGetCampaignsRequest) SinceCreateTime(sinceCreateTime time.Time) CampaignsAPIGetCampaignsRequest {
	r.sinceCreateTime = &sinceCreateTime
	return r
}

// The unique id for the list.
func (r CampaignsAPIGetCampaignsRequest) ListId(listId string) CampaignsAPIGetCampaignsRequest {
	r.listId = &listId
	return r
}

// The unique folder id.
func (r CampaignsAPIGetCampaignsRequest) FolderId(folderId string) CampaignsAPIGetCampaignsRequest {
	r.folderId = &folderId
	return r
}

// Retrieve campaigns sent to a particular list member. Member ID is The MD5 hash of the lowercase version of the list member’s email address.
func (r CampaignsAPIGetCampaignsRequest) MemberId(memberId string) CampaignsAPIGetCampaignsRequest {
	r.memberId = &memberId
	return r
}

// Returns files sorted by the specified field.
func (r CampaignsAPIGetCampaignsRequest) SortField(sortField string) CampaignsAPIGetCampaignsRequest {
	r.sortField = &sortField
	return r
}

// Determines the order direction for sorted results.
func (r CampaignsAPIGetCampaignsRequest) SortDir(sortDir string) CampaignsAPIGetCampaignsRequest {
	r.sortDir = &sortDir
	return r
}

// Return the &#x60;resend_shortcut_eligibility&#x60; field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered.
func (r CampaignsAPIGetCampaignsRequest) IncludeResendShortcutEligibility(includeResendShortcutEligibility bool) CampaignsAPIGetCampaignsRequest {
	r.includeResendShortcutEligibility = &includeResendShortcutEligibility
	return r
}

func (r CampaignsAPIGetCampaignsRequest) Execute() (*GetCampaigns200Response, *http.Response, error) {
	return r.ApiService.GetCampaignsExecute(r)
}

/*
GetCampaigns List campaigns

Get all campaigns in an account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CampaignsAPIGetCampaignsRequest
*/
func (a *CampaignsAPIService) GetCampaigns(ctx context.Context) CampaignsAPIGetCampaignsRequest {
	return CampaignsAPIGetCampaignsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetCampaigns200Response
func (a *CampaignsAPIService) GetCampaignsExecute(r CampaignsAPIGetCampaignsRequest) (*GetCampaigns200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetCampaigns200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.GetCampaigns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.beforeSendTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before_send_time", r.beforeSendTime, "")
	}
	if r.sinceSendTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "since_send_time", r.sinceSendTime, "")
	}
	if r.beforeCreateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before_create_time", r.beforeCreateTime, "")
	}
	if r.sinceCreateTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "since_create_time", r.sinceCreateTime, "")
	}
	if r.listId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "list_id", r.listId, "")
	}
	if r.folderId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "folder_id", r.folderId, "")
	}
	if r.memberId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "member_id", r.memberId, "")
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_field", r.sortField, "")
	}
	if r.sortDir != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_dir", r.sortDir, "")
	}
	if r.includeResendShortcutEligibility != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_resend_shortcut_eligibility", r.includeResendShortcutEligibility, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampaignsAPIGetCampaignsIdRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
	includeResendShortcutEligibility *bool
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r CampaignsAPIGetCampaignsIdRequest) Fields(fields []string) CampaignsAPIGetCampaignsIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r CampaignsAPIGetCampaignsIdRequest) ExcludeFields(excludeFields []string) CampaignsAPIGetCampaignsIdRequest {
	r.excludeFields = &excludeFields
	return r
}

// Return the &#x60;resend_shortcut_eligibility&#x60; field in the response, which tells you if the campaign is eligible for the various Campaign Resend Shortcuts offered.
func (r CampaignsAPIGetCampaignsIdRequest) IncludeResendShortcutEligibility(includeResendShortcutEligibility bool) CampaignsAPIGetCampaignsIdRequest {
	r.includeResendShortcutEligibility = &includeResendShortcutEligibility
	return r
}

func (r CampaignsAPIGetCampaignsIdRequest) Execute() (*Campaign, *http.Response, error) {
	return r.ApiService.GetCampaignsIdExecute(r)
}

/*
GetCampaignsId Get campaign info

Get information about a specific campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIGetCampaignsIdRequest
*/
func (a *CampaignsAPIService) GetCampaignsId(ctx context.Context, campaignId string) CampaignsAPIGetCampaignsIdRequest {
	return CampaignsAPIGetCampaignsIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return Campaign
func (a *CampaignsAPIService) GetCampaignsIdExecute(r CampaignsAPIGetCampaignsIdRequest) (*Campaign, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Campaign
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.GetCampaignsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.includeResendShortcutEligibility != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include_resend_shortcut_eligibility", r.includeResendShortcutEligibility, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampaignsAPIGetCampaignsIdContentRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r CampaignsAPIGetCampaignsIdContentRequest) Fields(fields []string) CampaignsAPIGetCampaignsIdContentRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r CampaignsAPIGetCampaignsIdContentRequest) ExcludeFields(excludeFields []string) CampaignsAPIGetCampaignsIdContentRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r CampaignsAPIGetCampaignsIdContentRequest) Execute() (*CampaignContent, *http.Response, error) {
	return r.ApiService.GetCampaignsIdContentExecute(r)
}

/*
GetCampaignsIdContent Get campaign content

Get the the HTML and plain-text content for a campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIGetCampaignsIdContentRequest
*/
func (a *CampaignsAPIService) GetCampaignsIdContent(ctx context.Context, campaignId string) CampaignsAPIGetCampaignsIdContentRequest {
	return CampaignsAPIGetCampaignsIdContentRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return CampaignContent
func (a *CampaignsAPIService) GetCampaignsIdContentExecute(r CampaignsAPIGetCampaignsIdContentRequest) (*CampaignContent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignContent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.GetCampaignsIdContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampaignsAPIGetCampaignsIdFeedbackRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r CampaignsAPIGetCampaignsIdFeedbackRequest) Fields(fields []string) CampaignsAPIGetCampaignsIdFeedbackRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r CampaignsAPIGetCampaignsIdFeedbackRequest) ExcludeFields(excludeFields []string) CampaignsAPIGetCampaignsIdFeedbackRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r CampaignsAPIGetCampaignsIdFeedbackRequest) Execute() (*CampaignReports, *http.Response, error) {
	return r.ApiService.GetCampaignsIdFeedbackExecute(r)
}

/*
GetCampaignsIdFeedback List campaign feedback

Get team feedback while you're working together on a Mailchimp campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIGetCampaignsIdFeedbackRequest
*/
func (a *CampaignsAPIService) GetCampaignsIdFeedback(ctx context.Context, campaignId string) CampaignsAPIGetCampaignsIdFeedbackRequest {
	return CampaignsAPIGetCampaignsIdFeedbackRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return CampaignReports
func (a *CampaignsAPIService) GetCampaignsIdFeedbackExecute(r CampaignsAPIGetCampaignsIdFeedbackRequest) (*CampaignReports, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignReports
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.GetCampaignsIdFeedback")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/feedback"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampaignsAPIGetCampaignsIdFeedbackIdRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
	feedbackId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r CampaignsAPIGetCampaignsIdFeedbackIdRequest) Fields(fields []string) CampaignsAPIGetCampaignsIdFeedbackIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r CampaignsAPIGetCampaignsIdFeedbackIdRequest) ExcludeFields(excludeFields []string) CampaignsAPIGetCampaignsIdFeedbackIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r CampaignsAPIGetCampaignsIdFeedbackIdRequest) Execute() (*CampaignFeedback2, *http.Response, error) {
	return r.ApiService.GetCampaignsIdFeedbackIdExecute(r)
}

/*
GetCampaignsIdFeedbackId Get campaign feedback message

Get a specific feedback message from a campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @param feedbackId The unique id for the feedback message.
 @return CampaignsAPIGetCampaignsIdFeedbackIdRequest
*/
func (a *CampaignsAPIService) GetCampaignsIdFeedbackId(ctx context.Context, campaignId string, feedbackId string) CampaignsAPIGetCampaignsIdFeedbackIdRequest {
	return CampaignsAPIGetCampaignsIdFeedbackIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
		feedbackId: feedbackId,
	}
}

// Execute executes the request
//  @return CampaignFeedback2
func (a *CampaignsAPIService) GetCampaignsIdFeedbackIdExecute(r CampaignsAPIGetCampaignsIdFeedbackIdRequest) (*CampaignFeedback2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignFeedback2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.GetCampaignsIdFeedbackId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/feedback/{feedback_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"feedback_id"+"}", url.PathEscape(parameterValueToString(r.feedbackId, "feedbackId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampaignsAPIGetCampaignsIdSendChecklistRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r CampaignsAPIGetCampaignsIdSendChecklistRequest) Fields(fields []string) CampaignsAPIGetCampaignsIdSendChecklistRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r CampaignsAPIGetCampaignsIdSendChecklistRequest) ExcludeFields(excludeFields []string) CampaignsAPIGetCampaignsIdSendChecklistRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r CampaignsAPIGetCampaignsIdSendChecklistRequest) Execute() (*SendChecklist, *http.Response, error) {
	return r.ApiService.GetCampaignsIdSendChecklistExecute(r)
}

/*
GetCampaignsIdSendChecklist Get campaign send checklist

Review the send checklist for a campaign, and resolve any issues before sending.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIGetCampaignsIdSendChecklistRequest
*/
func (a *CampaignsAPIService) GetCampaignsIdSendChecklist(ctx context.Context, campaignId string) CampaignsAPIGetCampaignsIdSendChecklistRequest {
	return CampaignsAPIGetCampaignsIdSendChecklistRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return SendChecklist
func (a *CampaignsAPIService) GetCampaignsIdSendChecklistExecute(r CampaignsAPIGetCampaignsIdSendChecklistRequest) (*SendChecklist, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SendChecklist
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.GetCampaignsIdSendChecklist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/send-checklist"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampaignsAPIPatchCampaignsIdRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
	body *Campaign2
}

func (r CampaignsAPIPatchCampaignsIdRequest) Body(body Campaign2) CampaignsAPIPatchCampaignsIdRequest {
	r.body = &body
	return r
}

func (r CampaignsAPIPatchCampaignsIdRequest) Execute() (*Campaign, *http.Response, error) {
	return r.ApiService.PatchCampaignsIdExecute(r)
}

/*
PatchCampaignsId Update campaign settings

Update some or all of the settings for a specific campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIPatchCampaignsIdRequest
*/
func (a *CampaignsAPIService) PatchCampaignsId(ctx context.Context, campaignId string) CampaignsAPIPatchCampaignsIdRequest {
	return CampaignsAPIPatchCampaignsIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return Campaign
func (a *CampaignsAPIService) PatchCampaignsIdExecute(r CampaignsAPIPatchCampaignsIdRequest) (*Campaign, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Campaign
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PatchCampaignsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampaignsAPIPatchCampaignsIdFeedbackIdRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
	feedbackId string
	body *CampaignFeedback3
}

func (r CampaignsAPIPatchCampaignsIdFeedbackIdRequest) Body(body CampaignFeedback3) CampaignsAPIPatchCampaignsIdFeedbackIdRequest {
	r.body = &body
	return r
}

func (r CampaignsAPIPatchCampaignsIdFeedbackIdRequest) Execute() (*CampaignFeedback2, *http.Response, error) {
	return r.ApiService.PatchCampaignsIdFeedbackIdExecute(r)
}

/*
PatchCampaignsIdFeedbackId Update campaign feedback message

Update a specific feedback message for a campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @param feedbackId The unique id for the feedback message.
 @return CampaignsAPIPatchCampaignsIdFeedbackIdRequest
*/
func (a *CampaignsAPIService) PatchCampaignsIdFeedbackId(ctx context.Context, campaignId string, feedbackId string) CampaignsAPIPatchCampaignsIdFeedbackIdRequest {
	return CampaignsAPIPatchCampaignsIdFeedbackIdRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
		feedbackId: feedbackId,
	}
}

// Execute executes the request
//  @return CampaignFeedback2
func (a *CampaignsAPIService) PatchCampaignsIdFeedbackIdExecute(r CampaignsAPIPatchCampaignsIdFeedbackIdRequest) (*CampaignFeedback2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignFeedback2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PatchCampaignsIdFeedbackId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/feedback/{feedback_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"feedback_id"+"}", url.PathEscape(parameterValueToString(r.feedbackId, "feedbackId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampaignsAPIPostCampaignsRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	body *Campaign1
}

func (r CampaignsAPIPostCampaignsRequest) Body(body Campaign1) CampaignsAPIPostCampaignsRequest {
	r.body = &body
	return r
}

func (r CampaignsAPIPostCampaignsRequest) Execute() (*Campaign, *http.Response, error) {
	return r.ApiService.PostCampaignsExecute(r)
}

/*
PostCampaigns Add campaign

Create a new Mailchimp campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CampaignsAPIPostCampaignsRequest
*/
func (a *CampaignsAPIService) PostCampaigns(ctx context.Context) CampaignsAPIPostCampaignsRequest {
	return CampaignsAPIPostCampaignsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Campaign
func (a *CampaignsAPIService) PostCampaignsExecute(r CampaignsAPIPostCampaignsRequest) (*Campaign, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Campaign
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PostCampaigns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampaignsAPIPostCampaignsIdActionsCancelSendRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
}

func (r CampaignsAPIPostCampaignsIdActionsCancelSendRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostCampaignsIdActionsCancelSendExecute(r)
}

/*
PostCampaignsIdActionsCancelSend Cancel campaign

Cancel a Regular or Plain-Text Campaign after you send, before all of your recipients receive it. This feature is included with Mailchimp Pro.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIPostCampaignsIdActionsCancelSendRequest
*/
func (a *CampaignsAPIService) PostCampaignsIdActionsCancelSend(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsCancelSendRequest {
	return CampaignsAPIPostCampaignsIdActionsCancelSendRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
func (a *CampaignsAPIService) PostCampaignsIdActionsCancelSendExecute(r CampaignsAPIPostCampaignsIdActionsCancelSendRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PostCampaignsIdActionsCancelSend")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/actions/cancel-send"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CampaignsAPIPostCampaignsIdActionsCreateResendRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
	body *PostCampaignsIdActionsCreateResendRequest
}

func (r CampaignsAPIPostCampaignsIdActionsCreateResendRequest) Body(body PostCampaignsIdActionsCreateResendRequest) CampaignsAPIPostCampaignsIdActionsCreateResendRequest {
	r.body = &body
	return r
}

func (r CampaignsAPIPostCampaignsIdActionsCreateResendRequest) Execute() (*Campaign3, *http.Response, error) {
	return r.ApiService.PostCampaignsIdActionsCreateResendExecute(r)
}

/*
PostCampaignsIdActionsCreateResend Resend campaign

Remove the guesswork for resending a campaign to certain segments. You can use this endpoint as a shortcut to replicate a campaign and resend it to common segments, such as those who didn't open the campaign, or any new subscribers since it was sent.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIPostCampaignsIdActionsCreateResendRequest
*/
func (a *CampaignsAPIService) PostCampaignsIdActionsCreateResend(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsCreateResendRequest {
	return CampaignsAPIPostCampaignsIdActionsCreateResendRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return Campaign3
func (a *CampaignsAPIService) PostCampaignsIdActionsCreateResendExecute(r CampaignsAPIPostCampaignsIdActionsCreateResendRequest) (*Campaign3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Campaign3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PostCampaignsIdActionsCreateResend")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/actions/create-resend"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampaignsAPIPostCampaignsIdActionsPauseRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
}

func (r CampaignsAPIPostCampaignsIdActionsPauseRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostCampaignsIdActionsPauseExecute(r)
}

/*
PostCampaignsIdActionsPause Pause rss campaign

Pause an RSS-Driven campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIPostCampaignsIdActionsPauseRequest
*/
func (a *CampaignsAPIService) PostCampaignsIdActionsPause(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsPauseRequest {
	return CampaignsAPIPostCampaignsIdActionsPauseRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
func (a *CampaignsAPIService) PostCampaignsIdActionsPauseExecute(r CampaignsAPIPostCampaignsIdActionsPauseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PostCampaignsIdActionsPause")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/actions/pause"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CampaignsAPIPostCampaignsIdActionsReplicateRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
}

func (r CampaignsAPIPostCampaignsIdActionsReplicateRequest) Execute() (*Campaign3, *http.Response, error) {
	return r.ApiService.PostCampaignsIdActionsReplicateExecute(r)
}

/*
PostCampaignsIdActionsReplicate Replicate campaign

Replicate a campaign in saved or send status.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIPostCampaignsIdActionsReplicateRequest
*/
func (a *CampaignsAPIService) PostCampaignsIdActionsReplicate(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsReplicateRequest {
	return CampaignsAPIPostCampaignsIdActionsReplicateRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return Campaign3
func (a *CampaignsAPIService) PostCampaignsIdActionsReplicateExecute(r CampaignsAPIPostCampaignsIdActionsReplicateRequest) (*Campaign3, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Campaign3
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PostCampaignsIdActionsReplicate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/actions/replicate"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampaignsAPIPostCampaignsIdActionsResumeRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
}

func (r CampaignsAPIPostCampaignsIdActionsResumeRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostCampaignsIdActionsResumeExecute(r)
}

/*
PostCampaignsIdActionsResume Resume rss campaign

Resume an RSS-Driven campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIPostCampaignsIdActionsResumeRequest
*/
func (a *CampaignsAPIService) PostCampaignsIdActionsResume(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsResumeRequest {
	return CampaignsAPIPostCampaignsIdActionsResumeRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
func (a *CampaignsAPIService) PostCampaignsIdActionsResumeExecute(r CampaignsAPIPostCampaignsIdActionsResumeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PostCampaignsIdActionsResume")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/actions/resume"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CampaignsAPIPostCampaignsIdActionsScheduleRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
	body *PostCampaignsIdActionsScheduleRequest
}

func (r CampaignsAPIPostCampaignsIdActionsScheduleRequest) Body(body PostCampaignsIdActionsScheduleRequest) CampaignsAPIPostCampaignsIdActionsScheduleRequest {
	r.body = &body
	return r
}

func (r CampaignsAPIPostCampaignsIdActionsScheduleRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostCampaignsIdActionsScheduleExecute(r)
}

/*
PostCampaignsIdActionsSchedule Schedule campaign

Schedule a campaign for delivery. If you're using Multivariate Campaigns to test send times or sending RSS Campaigns, use the send action instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIPostCampaignsIdActionsScheduleRequest
*/
func (a *CampaignsAPIService) PostCampaignsIdActionsSchedule(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsScheduleRequest {
	return CampaignsAPIPostCampaignsIdActionsScheduleRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
func (a *CampaignsAPIService) PostCampaignsIdActionsScheduleExecute(r CampaignsAPIPostCampaignsIdActionsScheduleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PostCampaignsIdActionsSchedule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/actions/schedule"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CampaignsAPIPostCampaignsIdActionsSendRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
}

func (r CampaignsAPIPostCampaignsIdActionsSendRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostCampaignsIdActionsSendExecute(r)
}

/*
PostCampaignsIdActionsSend Send campaign

Send a Mailchimp campaign. For RSS Campaigns, the campaign will send according to its schedule. All other campaigns will send immediately.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIPostCampaignsIdActionsSendRequest
*/
func (a *CampaignsAPIService) PostCampaignsIdActionsSend(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsSendRequest {
	return CampaignsAPIPostCampaignsIdActionsSendRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
func (a *CampaignsAPIService) PostCampaignsIdActionsSendExecute(r CampaignsAPIPostCampaignsIdActionsSendRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PostCampaignsIdActionsSend")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/actions/send"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CampaignsAPIPostCampaignsIdActionsTestRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
	body *PostCampaignsIdActionsTestRequest
}

func (r CampaignsAPIPostCampaignsIdActionsTestRequest) Body(body PostCampaignsIdActionsTestRequest) CampaignsAPIPostCampaignsIdActionsTestRequest {
	r.body = &body
	return r
}

func (r CampaignsAPIPostCampaignsIdActionsTestRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostCampaignsIdActionsTestExecute(r)
}

/*
PostCampaignsIdActionsTest Send test email

Send a test email.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIPostCampaignsIdActionsTestRequest
*/
func (a *CampaignsAPIService) PostCampaignsIdActionsTest(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsTestRequest {
	return CampaignsAPIPostCampaignsIdActionsTestRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
func (a *CampaignsAPIService) PostCampaignsIdActionsTestExecute(r CampaignsAPIPostCampaignsIdActionsTestRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PostCampaignsIdActionsTest")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/actions/test"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CampaignsAPIPostCampaignsIdActionsUnscheduleRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
}

func (r CampaignsAPIPostCampaignsIdActionsUnscheduleRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostCampaignsIdActionsUnscheduleExecute(r)
}

/*
PostCampaignsIdActionsUnschedule Unschedule campaign

Unschedule a scheduled campaign that hasn't started sending.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIPostCampaignsIdActionsUnscheduleRequest
*/
func (a *CampaignsAPIService) PostCampaignsIdActionsUnschedule(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdActionsUnscheduleRequest {
	return CampaignsAPIPostCampaignsIdActionsUnscheduleRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
func (a *CampaignsAPIService) PostCampaignsIdActionsUnscheduleExecute(r CampaignsAPIPostCampaignsIdActionsUnscheduleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PostCampaignsIdActionsUnschedule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/actions/unschedule"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CampaignsAPIPostCampaignsIdFeedbackRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
	body *CampaignFeedback1
}

func (r CampaignsAPIPostCampaignsIdFeedbackRequest) Body(body CampaignFeedback1) CampaignsAPIPostCampaignsIdFeedbackRequest {
	r.body = &body
	return r
}

func (r CampaignsAPIPostCampaignsIdFeedbackRequest) Execute() (*CampaignFeedback2, *http.Response, error) {
	return r.ApiService.PostCampaignsIdFeedbackExecute(r)
}

/*
PostCampaignsIdFeedback Add campaign feedback

Add feedback on a specific campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIPostCampaignsIdFeedbackRequest
*/
func (a *CampaignsAPIService) PostCampaignsIdFeedback(ctx context.Context, campaignId string) CampaignsAPIPostCampaignsIdFeedbackRequest {
	return CampaignsAPIPostCampaignsIdFeedbackRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return CampaignFeedback2
func (a *CampaignsAPIService) PostCampaignsIdFeedbackExecute(r CampaignsAPIPostCampaignsIdFeedbackRequest) (*CampaignFeedback2, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignFeedback2
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PostCampaignsIdFeedback")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/feedback"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CampaignsAPIPutCampaignsIdContentRequest struct {
	ctx context.Context
	ApiService CampaignsAPI
	campaignId string
	body *CampaignContent1
}

func (r CampaignsAPIPutCampaignsIdContentRequest) Body(body CampaignContent1) CampaignsAPIPutCampaignsIdContentRequest {
	r.body = &body
	return r
}

func (r CampaignsAPIPutCampaignsIdContentRequest) Execute() (*CampaignContent, *http.Response, error) {
	return r.ApiService.PutCampaignsIdContentExecute(r)
}

/*
PutCampaignsIdContent Set campaign content

Set the content for a campaign.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignId The unique id for the campaign.
 @return CampaignsAPIPutCampaignsIdContentRequest
*/
func (a *CampaignsAPIService) PutCampaignsIdContent(ctx context.Context, campaignId string) CampaignsAPIPutCampaignsIdContentRequest {
	return CampaignsAPIPutCampaignsIdContentRequest{
		ApiService: a,
		ctx: ctx,
		campaignId: campaignId,
	}
}

// Execute executes the request
//  @return CampaignContent
func (a *CampaignsAPIService) PutCampaignsIdContentExecute(r CampaignsAPIPutCampaignsIdContentRequest) (*CampaignContent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignContent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PutCampaignsIdContent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/campaigns/{campaign_id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_id"+"}", url.PathEscape(parameterValueToString(r.campaignId, "campaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
