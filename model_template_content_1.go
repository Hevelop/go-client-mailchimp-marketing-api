/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mailchimpmarketingapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TemplateContent1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateContent1{}

// TemplateContent1 Use this template to generate the HTML content for the campaign.
type TemplateContent1 struct {
	// The id of the template to use.
	Id int32 `json:"id"`
	// Content for the sections of the template. Each key should be the unique [mc:edit area](https://mailchimp.com/help/create-editable-content-areas-with-mailchimps-template-language/) name from the template.
	Sections map[string]interface{} `json:"sections,omitempty"`
}

type _TemplateContent1 TemplateContent1

// NewTemplateContent1 instantiates a new TemplateContent1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateContent1(id int32) *TemplateContent1 {
	this := TemplateContent1{}
	this.Id = id
	return &this
}

// NewTemplateContent1WithDefaults instantiates a new TemplateContent1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateContent1WithDefaults() *TemplateContent1 {
	this := TemplateContent1{}
	return &this
}

// GetId returns the Id field value
func (o *TemplateContent1) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TemplateContent1) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TemplateContent1) SetId(v int32) {
	o.Id = v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *TemplateContent1) GetSections() map[string]interface{} {
	if o == nil || IsNil(o.Sections) {
		var ret map[string]interface{}
		return ret
	}
	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateContent1) GetSectionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Sections) {
		return map[string]interface{}{}, false
	}
	return o.Sections, true
}

// ContainsSections returns a boolean if a field has been set.
func (o *TemplateContent1) ContainsSections() bool {
	if o != nil && !IsNil(o.Sections) {
		return true
	}

	return false
}

// SetSections gets a reference to the given map[string]interface{} and assigns it to the Sections field.
func (o *TemplateContent1) SetSections(v map[string]interface{}) {
	o.Sections = v
}

func (o TemplateContent1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateContent1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Sections) {
		toSerialize["sections"] = o.Sections
	}
	return toSerialize, nil
}

func (o *TemplateContent1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTemplateContent1 := _TemplateContent1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTemplateContent1)

	if err != nil {
		return err
	}

	*o = TemplateContent1(varTemplateContent1)

	return err
}

type NullableTemplateContent1 struct {
	value *TemplateContent1
	isSet bool
}

func (v NullableTemplateContent1) Get() *TemplateContent1 {
	return v.value
}

func (v *NullableTemplateContent1) Set(val *TemplateContent1) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateContent1) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateContent1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateContent1(val *TemplateContent1) *NullableTemplateContent1 {
	return &NullableTemplateContent1{value: val, isSet: true}
}

func (v NullableTemplateContent1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateContent1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


