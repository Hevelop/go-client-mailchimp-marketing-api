/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mailchimpmarketingapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectedSite1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectedSite1{}

// ConnectedSite1 Information about a specific connected site.
type ConnectedSite1 struct {
	// The unique identifier for the site.
	ForeignId string `json:"foreign_id"`
	// The connected site domain.
	Domain string `json:"domain"`
}

type _ConnectedSite1 ConnectedSite1

// NewConnectedSite1 instantiates a new ConnectedSite1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectedSite1(foreignId string, domain string) *ConnectedSite1 {
	this := ConnectedSite1{}
	this.ForeignId = foreignId
	this.Domain = domain
	return &this
}

// NewConnectedSite1WithDefaults instantiates a new ConnectedSite1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectedSite1WithDefaults() *ConnectedSite1 {
	this := ConnectedSite1{}
	return &this
}

// GetForeignId returns the ForeignId field value
func (o *ConnectedSite1) GetForeignId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForeignId
}

// GetForeignIdOk returns a tuple with the ForeignId field value
// and a boolean to check if the value has been set.
func (o *ConnectedSite1) GetForeignIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForeignId, true
}

// SetForeignId sets field value
func (o *ConnectedSite1) SetForeignId(v string) {
	o.ForeignId = v
}

// GetDomain returns the Domain field value
func (o *ConnectedSite1) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ConnectedSite1) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ConnectedSite1) SetDomain(v string) {
	o.Domain = v
}

func (o ConnectedSite1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectedSite1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["foreign_id"] = o.ForeignId
	toSerialize["domain"] = o.Domain
	return toSerialize, nil
}

func (o *ConnectedSite1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"foreign_id",
		"domain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectedSite1 := _ConnectedSite1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectedSite1)

	if err != nil {
		return err
	}

	*o = ConnectedSite1(varConnectedSite1)

	return err
}

type NullableConnectedSite1 struct {
	value *ConnectedSite1
	isSet bool
}

func (v NullableConnectedSite1) Get() *ConnectedSite1 {
	return v.value
}

func (v *NullableConnectedSite1) Set(val *ConnectedSite1) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectedSite1) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectedSite1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectedSite1(val *ConnectedSite1) *NullableConnectedSite1 {
	return &NullableConnectedSite1{value: val, isSet: true}
}

func (v NullableConnectedSite1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectedSite1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


