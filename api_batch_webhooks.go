/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mailchimpmarketingapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type BatchWebhooksAPI interface {

	/*
	DeleteBatchWebhookId Delete batch webhook

	Remove a batch webhook. Webhooks will no longer be sent to the given URL.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param batchWebhookId The unique id for the batch webhook.
	@return BatchWebhooksAPIDeleteBatchWebhookIdRequest
	*/
	DeleteBatchWebhookId(ctx context.Context, batchWebhookId string) BatchWebhooksAPIDeleteBatchWebhookIdRequest

	// DeleteBatchWebhookIdExecute executes the request
	DeleteBatchWebhookIdExecute(r BatchWebhooksAPIDeleteBatchWebhookIdRequest) (*http.Response, error)

	/*
	GetBatchWebhook Get batch webhook info

	Get information about a specific batch webhook.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param batchWebhookId The unique id for the batch webhook.
	@return BatchWebhooksAPIGetBatchWebhookRequest
	*/
	GetBatchWebhook(ctx context.Context, batchWebhookId string) BatchWebhooksAPIGetBatchWebhookRequest

	// GetBatchWebhookExecute executes the request
	//  @return BatchWebhook
	GetBatchWebhookExecute(r BatchWebhooksAPIGetBatchWebhookRequest) (*BatchWebhook, *http.Response, error)

	/*
	GetBatchWebhooks List batch webhooks

	Get all webhooks that have been configured for batches.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BatchWebhooksAPIGetBatchWebhooksRequest
	*/
	GetBatchWebhooks(ctx context.Context) BatchWebhooksAPIGetBatchWebhooksRequest

	// GetBatchWebhooksExecute executes the request
	//  @return BatchWebhooks
	GetBatchWebhooksExecute(r BatchWebhooksAPIGetBatchWebhooksRequest) (*BatchWebhooks, *http.Response, error)

	/*
	PatchBatchWebhooks Update batch webhook

	Update a webhook that will fire whenever any batch request completes processing.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param batchWebhookId The unique id for the batch webhook.
	@return BatchWebhooksAPIPatchBatchWebhooksRequest
	*/
	PatchBatchWebhooks(ctx context.Context, batchWebhookId string) BatchWebhooksAPIPatchBatchWebhooksRequest

	// PatchBatchWebhooksExecute executes the request
	//  @return BatchWebhook
	PatchBatchWebhooksExecute(r BatchWebhooksAPIPatchBatchWebhooksRequest) (*BatchWebhook, *http.Response, error)

	/*
	PostBatchWebhooks Add batch webhook

	Configure a webhook that will fire whenever any batch request completes processing.  You may only have a maximum of 20 batch webhooks.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BatchWebhooksAPIPostBatchWebhooksRequest
	*/
	PostBatchWebhooks(ctx context.Context) BatchWebhooksAPIPostBatchWebhooksRequest

	// PostBatchWebhooksExecute executes the request
	//  @return BatchWebhook
	PostBatchWebhooksExecute(r BatchWebhooksAPIPostBatchWebhooksRequest) (*BatchWebhook, *http.Response, error)
}

// BatchWebhooksAPIService BatchWebhooksAPI service
type BatchWebhooksAPIService service

type BatchWebhooksAPIDeleteBatchWebhookIdRequest struct {
	ctx context.Context
	ApiService BatchWebhooksAPI
	batchWebhookId string
}

func (r BatchWebhooksAPIDeleteBatchWebhookIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBatchWebhookIdExecute(r)
}

/*
DeleteBatchWebhookId Delete batch webhook

Remove a batch webhook. Webhooks will no longer be sent to the given URL.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param batchWebhookId The unique id for the batch webhook.
 @return BatchWebhooksAPIDeleteBatchWebhookIdRequest
*/
func (a *BatchWebhooksAPIService) DeleteBatchWebhookId(ctx context.Context, batchWebhookId string) BatchWebhooksAPIDeleteBatchWebhookIdRequest {
	return BatchWebhooksAPIDeleteBatchWebhookIdRequest{
		ApiService: a,
		ctx: ctx,
		batchWebhookId: batchWebhookId,
	}
}

// Execute executes the request
func (a *BatchWebhooksAPIService) DeleteBatchWebhookIdExecute(r BatchWebhooksAPIDeleteBatchWebhookIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchWebhooksAPIService.DeleteBatchWebhookId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/batch-webhooks/{batch_webhook_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"batch_webhook_id"+"}", url.PathEscape(parameterValueToString(r.batchWebhookId, "batchWebhookId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BatchWebhooksAPIGetBatchWebhookRequest struct {
	ctx context.Context
	ApiService BatchWebhooksAPI
	batchWebhookId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r BatchWebhooksAPIGetBatchWebhookRequest) Fields(fields []string) BatchWebhooksAPIGetBatchWebhookRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r BatchWebhooksAPIGetBatchWebhookRequest) ExcludeFields(excludeFields []string) BatchWebhooksAPIGetBatchWebhookRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r BatchWebhooksAPIGetBatchWebhookRequest) Execute() (*BatchWebhook, *http.Response, error) {
	return r.ApiService.GetBatchWebhookExecute(r)
}

/*
GetBatchWebhook Get batch webhook info

Get information about a specific batch webhook.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param batchWebhookId The unique id for the batch webhook.
 @return BatchWebhooksAPIGetBatchWebhookRequest
*/
func (a *BatchWebhooksAPIService) GetBatchWebhook(ctx context.Context, batchWebhookId string) BatchWebhooksAPIGetBatchWebhookRequest {
	return BatchWebhooksAPIGetBatchWebhookRequest{
		ApiService: a,
		ctx: ctx,
		batchWebhookId: batchWebhookId,
	}
}

// Execute executes the request
//  @return BatchWebhook
func (a *BatchWebhooksAPIService) GetBatchWebhookExecute(r BatchWebhooksAPIGetBatchWebhookRequest) (*BatchWebhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchWebhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchWebhooksAPIService.GetBatchWebhook")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/batch-webhooks/{batch_webhook_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"batch_webhook_id"+"}", url.PathEscape(parameterValueToString(r.batchWebhookId, "batchWebhookId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BatchWebhooksAPIGetBatchWebhooksRequest struct {
	ctx context.Context
	ApiService BatchWebhooksAPI
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r BatchWebhooksAPIGetBatchWebhooksRequest) Fields(fields []string) BatchWebhooksAPIGetBatchWebhooksRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r BatchWebhooksAPIGetBatchWebhooksRequest) ExcludeFields(excludeFields []string) BatchWebhooksAPIGetBatchWebhooksRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r BatchWebhooksAPIGetBatchWebhooksRequest) Count(count int32) BatchWebhooksAPIGetBatchWebhooksRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r BatchWebhooksAPIGetBatchWebhooksRequest) Offset(offset int32) BatchWebhooksAPIGetBatchWebhooksRequest {
	r.offset = &offset
	return r
}

func (r BatchWebhooksAPIGetBatchWebhooksRequest) Execute() (*BatchWebhooks, *http.Response, error) {
	return r.ApiService.GetBatchWebhooksExecute(r)
}

/*
GetBatchWebhooks List batch webhooks

Get all webhooks that have been configured for batches.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BatchWebhooksAPIGetBatchWebhooksRequest
*/
func (a *BatchWebhooksAPIService) GetBatchWebhooks(ctx context.Context) BatchWebhooksAPIGetBatchWebhooksRequest {
	return BatchWebhooksAPIGetBatchWebhooksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchWebhooks
func (a *BatchWebhooksAPIService) GetBatchWebhooksExecute(r BatchWebhooksAPIGetBatchWebhooksRequest) (*BatchWebhooks, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchWebhooks
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchWebhooksAPIService.GetBatchWebhooks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/batch-webhooks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BatchWebhooksAPIPatchBatchWebhooksRequest struct {
	ctx context.Context
	ApiService BatchWebhooksAPI
	batchWebhookId string
	body *BatchWebhook2
}

func (r BatchWebhooksAPIPatchBatchWebhooksRequest) Body(body BatchWebhook2) BatchWebhooksAPIPatchBatchWebhooksRequest {
	r.body = &body
	return r
}

func (r BatchWebhooksAPIPatchBatchWebhooksRequest) Execute() (*BatchWebhook, *http.Response, error) {
	return r.ApiService.PatchBatchWebhooksExecute(r)
}

/*
PatchBatchWebhooks Update batch webhook

Update a webhook that will fire whenever any batch request completes processing.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param batchWebhookId The unique id for the batch webhook.
 @return BatchWebhooksAPIPatchBatchWebhooksRequest
*/
func (a *BatchWebhooksAPIService) PatchBatchWebhooks(ctx context.Context, batchWebhookId string) BatchWebhooksAPIPatchBatchWebhooksRequest {
	return BatchWebhooksAPIPatchBatchWebhooksRequest{
		ApiService: a,
		ctx: ctx,
		batchWebhookId: batchWebhookId,
	}
}

// Execute executes the request
//  @return BatchWebhook
func (a *BatchWebhooksAPIService) PatchBatchWebhooksExecute(r BatchWebhooksAPIPatchBatchWebhooksRequest) (*BatchWebhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchWebhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchWebhooksAPIService.PatchBatchWebhooks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/batch-webhooks/{batch_webhook_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"batch_webhook_id"+"}", url.PathEscape(parameterValueToString(r.batchWebhookId, "batchWebhookId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BatchWebhooksAPIPostBatchWebhooksRequest struct {
	ctx context.Context
	ApiService BatchWebhooksAPI
	body *BatchWebhook1
}

func (r BatchWebhooksAPIPostBatchWebhooksRequest) Body(body BatchWebhook1) BatchWebhooksAPIPostBatchWebhooksRequest {
	r.body = &body
	return r
}

func (r BatchWebhooksAPIPostBatchWebhooksRequest) Execute() (*BatchWebhook, *http.Response, error) {
	return r.ApiService.PostBatchWebhooksExecute(r)
}

/*
PostBatchWebhooks Add batch webhook

Configure a webhook that will fire whenever any batch request completes processing.  You may only have a maximum of 20 batch webhooks.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BatchWebhooksAPIPostBatchWebhooksRequest
*/
func (a *BatchWebhooksAPIService) PostBatchWebhooks(ctx context.Context) BatchWebhooksAPIPostBatchWebhooksRequest {
	return BatchWebhooksAPIPostBatchWebhooksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchWebhook
func (a *BatchWebhooksAPIService) PostBatchWebhooksExecute(r BatchWebhooksAPIPostBatchWebhooksRequest) (*BatchWebhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchWebhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchWebhooksAPIService.PostBatchWebhooks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/batch-webhooks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
