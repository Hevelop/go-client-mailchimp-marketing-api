/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mailchimpmarketingapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ECommerceProductImage1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ECommerceProductImage1{}

// ECommerceProductImage1 Information about a specific product image.
type ECommerceProductImage1 struct {
	// A unique identifier for the product image.
	Id string `json:"id"`
	// The URL for a product image.
	Url string `json:"url"`
	// The list of product variants using the image.
	VariantIds []string `json:"variant_ids,omitempty"`
}

type _ECommerceProductImage1 ECommerceProductImage1

// NewECommerceProductImage1 instantiates a new ECommerceProductImage1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewECommerceProductImage1(id string, url string) *ECommerceProductImage1 {
	this := ECommerceProductImage1{}
	this.Id = id
	this.Url = url
	return &this
}

// NewECommerceProductImage1WithDefaults instantiates a new ECommerceProductImage1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewECommerceProductImage1WithDefaults() *ECommerceProductImage1 {
	this := ECommerceProductImage1{}
	return &this
}

// GetId returns the Id field value
func (o *ECommerceProductImage1) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ECommerceProductImage1) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ECommerceProductImage1) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *ECommerceProductImage1) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ECommerceProductImage1) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ECommerceProductImage1) SetUrl(v string) {
	o.Url = v
}

// GetVariantIds returns the VariantIds field value if set, zero value otherwise.
func (o *ECommerceProductImage1) GetVariantIds() []string {
	if o == nil || IsNil(o.VariantIds) {
		var ret []string
		return ret
	}
	return o.VariantIds
}

// GetVariantIdsOk returns a tuple with the VariantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ECommerceProductImage1) GetVariantIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.VariantIds) {
		return nil, false
	}
	return o.VariantIds, true
}

// ContainsVariantIds returns a boolean if a field has been set.
func (o *ECommerceProductImage1) ContainsVariantIds() bool {
	if o != nil && !IsNil(o.VariantIds) {
		return true
	}

	return false
}

// SetVariantIds gets a reference to the given []string and assigns it to the VariantIds field.
func (o *ECommerceProductImage1) SetVariantIds(v []string) {
	o.VariantIds = v
}

func (o ECommerceProductImage1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ECommerceProductImage1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["url"] = o.Url
	if !IsNil(o.VariantIds) {
		toSerialize["variant_ids"] = o.VariantIds
	}
	return toSerialize, nil
}

func (o *ECommerceProductImage1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varECommerceProductImage1 := _ECommerceProductImage1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varECommerceProductImage1)

	if err != nil {
		return err
	}

	*o = ECommerceProductImage1(varECommerceProductImage1)

	return err
}

type NullableECommerceProductImage1 struct {
	value *ECommerceProductImage1
	isSet bool
}

func (v NullableECommerceProductImage1) Get() *ECommerceProductImage1 {
	return v.value
}

func (v *NullableECommerceProductImage1) Set(val *ECommerceProductImage1) {
	v.value = val
	v.isSet = true
}

func (v NullableECommerceProductImage1) IsSet() bool {
	return v.isSet
}

func (v *NullableECommerceProductImage1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableECommerceProductImage1(val *ECommerceProductImage1) *NullableECommerceProductImage1 {
	return &NullableECommerceProductImage1{value: val, isSet: true}
}

func (v NullableECommerceProductImage1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableECommerceProductImage1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


