/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mailchimpmarketingapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ReportingAPI interface {

	/*
	GetReportingLandingPages List landing pages reports

	Get reports of landing pages.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ReportingAPIGetReportingLandingPagesRequest
	*/
	GetReportingLandingPages(ctx context.Context) ReportingAPIGetReportingLandingPagesRequest

	// GetReportingLandingPagesExecute executes the request
	//  @return GetReportingLandingPages200Response
	GetReportingLandingPagesExecute(r ReportingAPIGetReportingLandingPagesRequest) (*GetReportingLandingPages200Response, *http.Response, error)

	/*
	GetReportingLandingPagesId Get landing page report

	Get report of a landing page.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param outreachId The outreach id.
	@return ReportingAPIGetReportingLandingPagesIdRequest
	*/
	GetReportingLandingPagesId(ctx context.Context, outreachId string) ReportingAPIGetReportingLandingPagesIdRequest

	// GetReportingLandingPagesIdExecute executes the request
	//  @return LandingPageReport
	GetReportingLandingPagesIdExecute(r ReportingAPIGetReportingLandingPagesIdRequest) (*LandingPageReport, *http.Response, error)

	/*
	GetReportingSurveys List survey reports

	Get reports for surveys.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ReportingAPIGetReportingSurveysRequest
	*/
	GetReportingSurveys(ctx context.Context) ReportingAPIGetReportingSurveysRequest

	// GetReportingSurveysExecute executes the request
	//  @return GetReportingSurveys200Response
	GetReportingSurveysExecute(r ReportingAPIGetReportingSurveysRequest) (*GetReportingSurveys200Response, *http.Response, error)

	/*
	GetReportingSurveysId Get survey report

	Get report for a survey.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param surveyId The ID of the survey.
	@return ReportingAPIGetReportingSurveysIdRequest
	*/
	GetReportingSurveysId(ctx context.Context, surveyId string) ReportingAPIGetReportingSurveysIdRequest

	// GetReportingSurveysIdExecute executes the request
	//  @return SurveyReport
	GetReportingSurveysIdExecute(r ReportingAPIGetReportingSurveysIdRequest) (*SurveyReport, *http.Response, error)

	/*
	GetReportingSurveysIdQuestions List survey question reports

	Get reports for survey questions.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param surveyId The ID of the survey.
	@return ReportingAPIGetReportingSurveysIdQuestionsRequest
	*/
	GetReportingSurveysIdQuestions(ctx context.Context, surveyId string) ReportingAPIGetReportingSurveysIdQuestionsRequest

	// GetReportingSurveysIdQuestionsExecute executes the request
	//  @return GetReportingSurveysIdQuestions200Response
	GetReportingSurveysIdQuestionsExecute(r ReportingAPIGetReportingSurveysIdQuestionsRequest) (*GetReportingSurveysIdQuestions200Response, *http.Response, error)

	/*
	GetReportingSurveysIdQuestionsId Get survey question report

	Get report for a survey question.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param surveyId The ID of the survey.
	@param questionId The ID of the survey question.
	@return ReportingAPIGetReportingSurveysIdQuestionsIdRequest
	*/
	GetReportingSurveysIdQuestionsId(ctx context.Context, surveyId string, questionId string) ReportingAPIGetReportingSurveysIdQuestionsIdRequest

	// GetReportingSurveysIdQuestionsIdExecute executes the request
	//  @return SurveyQuestionReport
	GetReportingSurveysIdQuestionsIdExecute(r ReportingAPIGetReportingSurveysIdQuestionsIdRequest) (*SurveyQuestionReport, *http.Response, error)

	/*
	GetReportingSurveysIdQuestionsIdAnswers List answers for question

	Get answers for a survey question.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param surveyId The ID of the survey.
	@param questionId The ID of the survey question.
	@return ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest
	*/
	GetReportingSurveysIdQuestionsIdAnswers(ctx context.Context, surveyId string, questionId string) ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest

	// GetReportingSurveysIdQuestionsIdAnswersExecute executes the request
	//  @return GetReportingSurveysIdQuestionsIdAnswers200Response
	GetReportingSurveysIdQuestionsIdAnswersExecute(r ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest) (*GetReportingSurveysIdQuestionsIdAnswers200Response, *http.Response, error)

	/*
	GetReportingSurveysIdResponses List survey responses

	Get responses to a survey.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param surveyId The ID of the survey.
	@return ReportingAPIGetReportingSurveysIdResponsesRequest
	*/
	GetReportingSurveysIdResponses(ctx context.Context, surveyId string) ReportingAPIGetReportingSurveysIdResponsesRequest

	// GetReportingSurveysIdResponsesExecute executes the request
	//  @return GetReportingSurveysIdResponses200Response
	GetReportingSurveysIdResponsesExecute(r ReportingAPIGetReportingSurveysIdResponsesRequest) (*GetReportingSurveysIdResponses200Response, *http.Response, error)

	/*
	GetReportingSurveysIdResponsesId Get survey response

	Get a single survey response.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param surveyId The ID of the survey.
	@param responseId The ID of the survey response.
	@return ReportingAPIGetReportingSurveysIdResponsesIdRequest
	*/
	GetReportingSurveysIdResponsesId(ctx context.Context, surveyId string, responseId string) ReportingAPIGetReportingSurveysIdResponsesIdRequest

	// GetReportingSurveysIdResponsesIdExecute executes the request
	//  @return SurveyResponse
	GetReportingSurveysIdResponsesIdExecute(r ReportingAPIGetReportingSurveysIdResponsesIdRequest) (*SurveyResponse, *http.Response, error)
}

// ReportingAPIService ReportingAPI service
type ReportingAPIService service

type ReportingAPIGetReportingLandingPagesRequest struct {
	ctx context.Context
	ApiService ReportingAPI
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingLandingPagesRequest) Fields(fields []string) ReportingAPIGetReportingLandingPagesRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingLandingPagesRequest) ExcludeFields(excludeFields []string) ReportingAPIGetReportingLandingPagesRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ReportingAPIGetReportingLandingPagesRequest) Count(count int32) ReportingAPIGetReportingLandingPagesRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ReportingAPIGetReportingLandingPagesRequest) Offset(offset int32) ReportingAPIGetReportingLandingPagesRequest {
	r.offset = &offset
	return r
}

func (r ReportingAPIGetReportingLandingPagesRequest) Execute() (*GetReportingLandingPages200Response, *http.Response, error) {
	return r.ApiService.GetReportingLandingPagesExecute(r)
}

/*
GetReportingLandingPages List landing pages reports

Get reports of landing pages.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReportingAPIGetReportingLandingPagesRequest
*/
func (a *ReportingAPIService) GetReportingLandingPages(ctx context.Context) ReportingAPIGetReportingLandingPagesRequest {
	return ReportingAPIGetReportingLandingPagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetReportingLandingPages200Response
func (a *ReportingAPIService) GetReportingLandingPagesExecute(r ReportingAPIGetReportingLandingPagesRequest) (*GetReportingLandingPages200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportingLandingPages200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingLandingPages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/landing-pages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportingAPIGetReportingLandingPagesIdRequest struct {
	ctx context.Context
	ApiService ReportingAPI
	outreachId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingLandingPagesIdRequest) Fields(fields []string) ReportingAPIGetReportingLandingPagesIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingLandingPagesIdRequest) ExcludeFields(excludeFields []string) ReportingAPIGetReportingLandingPagesIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportingAPIGetReportingLandingPagesIdRequest) Execute() (*LandingPageReport, *http.Response, error) {
	return r.ApiService.GetReportingLandingPagesIdExecute(r)
}

/*
GetReportingLandingPagesId Get landing page report

Get report of a landing page.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outreachId The outreach id.
 @return ReportingAPIGetReportingLandingPagesIdRequest
*/
func (a *ReportingAPIService) GetReportingLandingPagesId(ctx context.Context, outreachId string) ReportingAPIGetReportingLandingPagesIdRequest {
	return ReportingAPIGetReportingLandingPagesIdRequest{
		ApiService: a,
		ctx: ctx,
		outreachId: outreachId,
	}
}

// Execute executes the request
//  @return LandingPageReport
func (a *ReportingAPIService) GetReportingLandingPagesIdExecute(r ReportingAPIGetReportingLandingPagesIdRequest) (*LandingPageReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LandingPageReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingLandingPagesId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/landing-pages/{outreach_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"outreach_id"+"}", url.PathEscape(parameterValueToString(r.outreachId, "outreachId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportingAPIGetReportingSurveysRequest struct {
	ctx context.Context
	ApiService ReportingAPI
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingSurveysRequest) Fields(fields []string) ReportingAPIGetReportingSurveysRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingSurveysRequest) ExcludeFields(excludeFields []string) ReportingAPIGetReportingSurveysRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r ReportingAPIGetReportingSurveysRequest) Count(count int32) ReportingAPIGetReportingSurveysRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r ReportingAPIGetReportingSurveysRequest) Offset(offset int32) ReportingAPIGetReportingSurveysRequest {
	r.offset = &offset
	return r
}

func (r ReportingAPIGetReportingSurveysRequest) Execute() (*GetReportingSurveys200Response, *http.Response, error) {
	return r.ApiService.GetReportingSurveysExecute(r)
}

/*
GetReportingSurveys List survey reports

Get reports for surveys.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReportingAPIGetReportingSurveysRequest
*/
func (a *ReportingAPIService) GetReportingSurveys(ctx context.Context) ReportingAPIGetReportingSurveysRequest {
	return ReportingAPIGetReportingSurveysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetReportingSurveys200Response
func (a *ReportingAPIService) GetReportingSurveysExecute(r ReportingAPIGetReportingSurveysRequest) (*GetReportingSurveys200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportingSurveys200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveys")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportingAPIGetReportingSurveysIdRequest struct {
	ctx context.Context
	ApiService ReportingAPI
	surveyId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingSurveysIdRequest) Fields(fields []string) ReportingAPIGetReportingSurveysIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingSurveysIdRequest) ExcludeFields(excludeFields []string) ReportingAPIGetReportingSurveysIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportingAPIGetReportingSurveysIdRequest) Execute() (*SurveyReport, *http.Response, error) {
	return r.ApiService.GetReportingSurveysIdExecute(r)
}

/*
GetReportingSurveysId Get survey report

Get report for a survey.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param surveyId The ID of the survey.
 @return ReportingAPIGetReportingSurveysIdRequest
*/
func (a *ReportingAPIService) GetReportingSurveysId(ctx context.Context, surveyId string) ReportingAPIGetReportingSurveysIdRequest {
	return ReportingAPIGetReportingSurveysIdRequest{
		ApiService: a,
		ctx: ctx,
		surveyId: surveyId,
	}
}

// Execute executes the request
//  @return SurveyReport
func (a *ReportingAPIService) GetReportingSurveysIdExecute(r ReportingAPIGetReportingSurveysIdRequest) (*SurveyReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveysId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys/{survey_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"survey_id"+"}", url.PathEscape(parameterValueToString(r.surveyId, "surveyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportingAPIGetReportingSurveysIdQuestionsRequest struct {
	ctx context.Context
	ApiService ReportingAPI
	surveyId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingSurveysIdQuestionsRequest) Fields(fields []string) ReportingAPIGetReportingSurveysIdQuestionsRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingSurveysIdQuestionsRequest) ExcludeFields(excludeFields []string) ReportingAPIGetReportingSurveysIdQuestionsRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportingAPIGetReportingSurveysIdQuestionsRequest) Execute() (*GetReportingSurveysIdQuestions200Response, *http.Response, error) {
	return r.ApiService.GetReportingSurveysIdQuestionsExecute(r)
}

/*
GetReportingSurveysIdQuestions List survey question reports

Get reports for survey questions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param surveyId The ID of the survey.
 @return ReportingAPIGetReportingSurveysIdQuestionsRequest
*/
func (a *ReportingAPIService) GetReportingSurveysIdQuestions(ctx context.Context, surveyId string) ReportingAPIGetReportingSurveysIdQuestionsRequest {
	return ReportingAPIGetReportingSurveysIdQuestionsRequest{
		ApiService: a,
		ctx: ctx,
		surveyId: surveyId,
	}
}

// Execute executes the request
//  @return GetReportingSurveysIdQuestions200Response
func (a *ReportingAPIService) GetReportingSurveysIdQuestionsExecute(r ReportingAPIGetReportingSurveysIdQuestionsRequest) (*GetReportingSurveysIdQuestions200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportingSurveysIdQuestions200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveysIdQuestions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys/{survey_id}/questions"
	localVarPath = strings.Replace(localVarPath, "{"+"survey_id"+"}", url.PathEscape(parameterValueToString(r.surveyId, "surveyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportingAPIGetReportingSurveysIdQuestionsIdRequest struct {
	ctx context.Context
	ApiService ReportingAPI
	surveyId string
	questionId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingSurveysIdQuestionsIdRequest) Fields(fields []string) ReportingAPIGetReportingSurveysIdQuestionsIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingSurveysIdQuestionsIdRequest) ExcludeFields(excludeFields []string) ReportingAPIGetReportingSurveysIdQuestionsIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r ReportingAPIGetReportingSurveysIdQuestionsIdRequest) Execute() (*SurveyQuestionReport, *http.Response, error) {
	return r.ApiService.GetReportingSurveysIdQuestionsIdExecute(r)
}

/*
GetReportingSurveysIdQuestionsId Get survey question report

Get report for a survey question.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param surveyId The ID of the survey.
 @param questionId The ID of the survey question.
 @return ReportingAPIGetReportingSurveysIdQuestionsIdRequest
*/
func (a *ReportingAPIService) GetReportingSurveysIdQuestionsId(ctx context.Context, surveyId string, questionId string) ReportingAPIGetReportingSurveysIdQuestionsIdRequest {
	return ReportingAPIGetReportingSurveysIdQuestionsIdRequest{
		ApiService: a,
		ctx: ctx,
		surveyId: surveyId,
		questionId: questionId,
	}
}

// Execute executes the request
//  @return SurveyQuestionReport
func (a *ReportingAPIService) GetReportingSurveysIdQuestionsIdExecute(r ReportingAPIGetReportingSurveysIdQuestionsIdRequest) (*SurveyQuestionReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyQuestionReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveysIdQuestionsId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys/{survey_id}/questions/{question_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"survey_id"+"}", url.PathEscape(parameterValueToString(r.surveyId, "surveyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"question_id"+"}", url.PathEscape(parameterValueToString(r.questionId, "questionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest struct {
	ctx context.Context
	ApiService ReportingAPI
	surveyId string
	questionId string
	fields *[]string
	excludeFields *[]string
	respondentFamiliarityIs *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest) Fields(fields []string) ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest) ExcludeFields(excludeFields []string) ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest {
	r.excludeFields = &excludeFields
	return r
}

// Filter survey responses by familiarity of the respondents.
func (r ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest) RespondentFamiliarityIs(respondentFamiliarityIs string) ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest {
	r.respondentFamiliarityIs = &respondentFamiliarityIs
	return r
}

func (r ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest) Execute() (*GetReportingSurveysIdQuestionsIdAnswers200Response, *http.Response, error) {
	return r.ApiService.GetReportingSurveysIdQuestionsIdAnswersExecute(r)
}

/*
GetReportingSurveysIdQuestionsIdAnswers List answers for question

Get answers for a survey question.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param surveyId The ID of the survey.
 @param questionId The ID of the survey question.
 @return ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest
*/
func (a *ReportingAPIService) GetReportingSurveysIdQuestionsIdAnswers(ctx context.Context, surveyId string, questionId string) ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest {
	return ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest{
		ApiService: a,
		ctx: ctx,
		surveyId: surveyId,
		questionId: questionId,
	}
}

// Execute executes the request
//  @return GetReportingSurveysIdQuestionsIdAnswers200Response
func (a *ReportingAPIService) GetReportingSurveysIdQuestionsIdAnswersExecute(r ReportingAPIGetReportingSurveysIdQuestionsIdAnswersRequest) (*GetReportingSurveysIdQuestionsIdAnswers200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportingSurveysIdQuestionsIdAnswers200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveysIdQuestionsIdAnswers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys/{survey_id}/questions/{question_id}/answers"
	localVarPath = strings.Replace(localVarPath, "{"+"survey_id"+"}", url.PathEscape(parameterValueToString(r.surveyId, "surveyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"question_id"+"}", url.PathEscape(parameterValueToString(r.questionId, "questionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.respondentFamiliarityIs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "respondent_familiarity_is", r.respondentFamiliarityIs, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportingAPIGetReportingSurveysIdResponsesRequest struct {
	ctx context.Context
	ApiService ReportingAPI
	surveyId string
	fields *[]string
	excludeFields *[]string
	answeredQuestion *int32
	choseAnswer *string
	respondentFamiliarityIs *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingSurveysIdResponsesRequest) Fields(fields []string) ReportingAPIGetReportingSurveysIdResponsesRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r ReportingAPIGetReportingSurveysIdResponsesRequest) ExcludeFields(excludeFields []string) ReportingAPIGetReportingSurveysIdResponsesRequest {
	r.excludeFields = &excludeFields
	return r
}

// The ID of the question that was answered.
func (r ReportingAPIGetReportingSurveysIdResponsesRequest) AnsweredQuestion(answeredQuestion int32) ReportingAPIGetReportingSurveysIdResponsesRequest {
	r.answeredQuestion = &answeredQuestion
	return r
}

// The ID of the option chosen to filter responses on.
func (r ReportingAPIGetReportingSurveysIdResponsesRequest) ChoseAnswer(choseAnswer string) ReportingAPIGetReportingSurveysIdResponsesRequest {
	r.choseAnswer = &choseAnswer
	return r
}

// Filter survey responses by familiarity of the respondents.
func (r ReportingAPIGetReportingSurveysIdResponsesRequest) RespondentFamiliarityIs(respondentFamiliarityIs string) ReportingAPIGetReportingSurveysIdResponsesRequest {
	r.respondentFamiliarityIs = &respondentFamiliarityIs
	return r
}

func (r ReportingAPIGetReportingSurveysIdResponsesRequest) Execute() (*GetReportingSurveysIdResponses200Response, *http.Response, error) {
	return r.ApiService.GetReportingSurveysIdResponsesExecute(r)
}

/*
GetReportingSurveysIdResponses List survey responses

Get responses to a survey.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param surveyId The ID of the survey.
 @return ReportingAPIGetReportingSurveysIdResponsesRequest
*/
func (a *ReportingAPIService) GetReportingSurveysIdResponses(ctx context.Context, surveyId string) ReportingAPIGetReportingSurveysIdResponsesRequest {
	return ReportingAPIGetReportingSurveysIdResponsesRequest{
		ApiService: a,
		ctx: ctx,
		surveyId: surveyId,
	}
}

// Execute executes the request
//  @return GetReportingSurveysIdResponses200Response
func (a *ReportingAPIService) GetReportingSurveysIdResponsesExecute(r ReportingAPIGetReportingSurveysIdResponsesRequest) (*GetReportingSurveysIdResponses200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetReportingSurveysIdResponses200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveysIdResponses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys/{survey_id}/responses"
	localVarPath = strings.Replace(localVarPath, "{"+"survey_id"+"}", url.PathEscape(parameterValueToString(r.surveyId, "surveyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.answeredQuestion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "answered_question", r.answeredQuestion, "")
	}
	if r.choseAnswer != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "chose_answer", r.choseAnswer, "")
	}
	if r.respondentFamiliarityIs != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "respondent_familiarity_is", r.respondentFamiliarityIs, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReportingAPIGetReportingSurveysIdResponsesIdRequest struct {
	ctx context.Context
	ApiService ReportingAPI
	surveyId string
	responseId string
}

func (r ReportingAPIGetReportingSurveysIdResponsesIdRequest) Execute() (*SurveyResponse, *http.Response, error) {
	return r.ApiService.GetReportingSurveysIdResponsesIdExecute(r)
}

/*
GetReportingSurveysIdResponsesId Get survey response

Get a single survey response.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param surveyId The ID of the survey.
 @param responseId The ID of the survey response.
 @return ReportingAPIGetReportingSurveysIdResponsesIdRequest
*/
func (a *ReportingAPIService) GetReportingSurveysIdResponsesId(ctx context.Context, surveyId string, responseId string) ReportingAPIGetReportingSurveysIdResponsesIdRequest {
	return ReportingAPIGetReportingSurveysIdResponsesIdRequest{
		ApiService: a,
		ctx: ctx,
		surveyId: surveyId,
		responseId: responseId,
	}
}

// Execute executes the request
//  @return SurveyResponse
func (a *ReportingAPIService) GetReportingSurveysIdResponsesIdExecute(r ReportingAPIGetReportingSurveysIdResponsesIdRequest) (*SurveyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportingAPIService.GetReportingSurveysIdResponsesId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reporting/surveys/{survey_id}/responses/{response_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"survey_id"+"}", url.PathEscape(parameterValueToString(r.surveyId, "surveyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"response_id"+"}", url.PathEscape(parameterValueToString(r.responseId, "responseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
