/*
Mailchimp Marketing API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.55
Contact: apihelp@mailchimp.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mailchimpmarketingapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type FileManagerAPI interface {

	/*
	DeleteFileManagerFilesId Delete file

	Remove a specific file from the File Manager.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param fileId The unique id for the File Manager file.
	@return FileManagerAPIDeleteFileManagerFilesIdRequest
	*/
	DeleteFileManagerFilesId(ctx context.Context, fileId string) FileManagerAPIDeleteFileManagerFilesIdRequest

	// DeleteFileManagerFilesIdExecute executes the request
	DeleteFileManagerFilesIdExecute(r FileManagerAPIDeleteFileManagerFilesIdRequest) (*http.Response, error)

	/*
	DeleteFileManagerFoldersId Delete folder

	Delete a specific folder in the File Manager.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param folderId The unique id for the File Manager folder.
	@return FileManagerAPIDeleteFileManagerFoldersIdRequest
	*/
	DeleteFileManagerFoldersId(ctx context.Context, folderId string) FileManagerAPIDeleteFileManagerFoldersIdRequest

	// DeleteFileManagerFoldersIdExecute executes the request
	DeleteFileManagerFoldersIdExecute(r FileManagerAPIDeleteFileManagerFoldersIdRequest) (*http.Response, error)

	/*
	GetFileManagerFiles List stored files

	Get a list of available images and files stored in the File Manager for the account.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FileManagerAPIGetFileManagerFilesRequest
	*/
	GetFileManagerFiles(ctx context.Context) FileManagerAPIGetFileManagerFilesRequest

	// GetFileManagerFilesExecute executes the request
	//  @return FileManager
	GetFileManagerFilesExecute(r FileManagerAPIGetFileManagerFilesRequest) (*FileManager, *http.Response, error)

	/*
	GetFileManagerFilesId Get file

	Get information about a specific file in the File Manager.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param fileId The unique id for the File Manager file.
	@return FileManagerAPIGetFileManagerFilesIdRequest
	*/
	GetFileManagerFilesId(ctx context.Context, fileId string) FileManagerAPIGetFileManagerFilesIdRequest

	// GetFileManagerFilesIdExecute executes the request
	//  @return GalleryFile
	GetFileManagerFilesIdExecute(r FileManagerAPIGetFileManagerFilesIdRequest) (*GalleryFile, *http.Response, error)

	/*
	GetFileManagerFolders List folders

	Get a list of all folders in the File Manager.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FileManagerAPIGetFileManagerFoldersRequest
	*/
	GetFileManagerFolders(ctx context.Context) FileManagerAPIGetFileManagerFoldersRequest

	// GetFileManagerFoldersExecute executes the request
	//  @return FileManagerFolders
	GetFileManagerFoldersExecute(r FileManagerAPIGetFileManagerFoldersRequest) (*FileManagerFolders, *http.Response, error)

	/*
	GetFileManagerFoldersFiles List stored files

	Get a list of available images and files stored in this folder.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param folderId The unique id for the File Manager folder.
	@return FileManagerAPIGetFileManagerFoldersFilesRequest
	*/
	GetFileManagerFoldersFiles(ctx context.Context, folderId string) FileManagerAPIGetFileManagerFoldersFilesRequest

	// GetFileManagerFoldersFilesExecute executes the request
	//  @return FileManager
	GetFileManagerFoldersFilesExecute(r FileManagerAPIGetFileManagerFoldersFilesRequest) (*FileManager, *http.Response, error)

	/*
	GetFileManagerFoldersId Get folder

	Get information about a specific folder in the File Manager.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param folderId The unique id for the File Manager folder.
	@return FileManagerAPIGetFileManagerFoldersIdRequest
	*/
	GetFileManagerFoldersId(ctx context.Context, folderId string) FileManagerAPIGetFileManagerFoldersIdRequest

	// GetFileManagerFoldersIdExecute executes the request
	//  @return GalleryFolder
	GetFileManagerFoldersIdExecute(r FileManagerAPIGetFileManagerFoldersIdRequest) (*GalleryFolder, *http.Response, error)

	/*
	PatchFileManagerFilesId Update file

	Update a file in the File Manager.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param fileId The unique id for the File Manager file.
	@return FileManagerAPIPatchFileManagerFilesIdRequest
	*/
	PatchFileManagerFilesId(ctx context.Context, fileId string) FileManagerAPIPatchFileManagerFilesIdRequest

	// PatchFileManagerFilesIdExecute executes the request
	//  @return GalleryFile
	PatchFileManagerFilesIdExecute(r FileManagerAPIPatchFileManagerFilesIdRequest) (*GalleryFile, *http.Response, error)

	/*
	PatchFileManagerFoldersId Update folder

	Update a specific File Manager folder.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param folderId The unique id for the File Manager folder.
	@return FileManagerAPIPatchFileManagerFoldersIdRequest
	*/
	PatchFileManagerFoldersId(ctx context.Context, folderId string) FileManagerAPIPatchFileManagerFoldersIdRequest

	// PatchFileManagerFoldersIdExecute executes the request
	//  @return GalleryFolder
	PatchFileManagerFoldersIdExecute(r FileManagerAPIPatchFileManagerFoldersIdRequest) (*GalleryFolder, *http.Response, error)

	/*
	PostFileManagerFiles Add file

	Upload a new image or file to the File Manager.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FileManagerAPIPostFileManagerFilesRequest
	*/
	PostFileManagerFiles(ctx context.Context) FileManagerAPIPostFileManagerFilesRequest

	// PostFileManagerFilesExecute executes the request
	//  @return GalleryFile
	PostFileManagerFilesExecute(r FileManagerAPIPostFileManagerFilesRequest) (*GalleryFile, *http.Response, error)

	/*
	PostFileManagerFolders Add folder

	Create a new folder in the File Manager.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return FileManagerAPIPostFileManagerFoldersRequest
	*/
	PostFileManagerFolders(ctx context.Context) FileManagerAPIPostFileManagerFoldersRequest

	// PostFileManagerFoldersExecute executes the request
	//  @return GalleryFolder
	PostFileManagerFoldersExecute(r FileManagerAPIPostFileManagerFoldersRequest) (*GalleryFolder, *http.Response, error)
}

// FileManagerAPIService FileManagerAPI service
type FileManagerAPIService service

type FileManagerAPIDeleteFileManagerFilesIdRequest struct {
	ctx context.Context
	ApiService FileManagerAPI
	fileId string
}

func (r FileManagerAPIDeleteFileManagerFilesIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFileManagerFilesIdExecute(r)
}

/*
DeleteFileManagerFilesId Delete file

Remove a specific file from the File Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileId The unique id for the File Manager file.
 @return FileManagerAPIDeleteFileManagerFilesIdRequest
*/
func (a *FileManagerAPIService) DeleteFileManagerFilesId(ctx context.Context, fileId string) FileManagerAPIDeleteFileManagerFilesIdRequest {
	return FileManagerAPIDeleteFileManagerFilesIdRequest{
		ApiService: a,
		ctx: ctx,
		fileId: fileId,
	}
}

// Execute executes the request
func (a *FileManagerAPIService) DeleteFileManagerFilesIdExecute(r FileManagerAPIDeleteFileManagerFilesIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FileManagerAPIService.DeleteFileManagerFilesId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/file-manager/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", url.PathEscape(parameterValueToString(r.fileId, "fileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type FileManagerAPIDeleteFileManagerFoldersIdRequest struct {
	ctx context.Context
	ApiService FileManagerAPI
	folderId string
}

func (r FileManagerAPIDeleteFileManagerFoldersIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFileManagerFoldersIdExecute(r)
}

/*
DeleteFileManagerFoldersId Delete folder

Delete a specific folder in the File Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param folderId The unique id for the File Manager folder.
 @return FileManagerAPIDeleteFileManagerFoldersIdRequest
*/
func (a *FileManagerAPIService) DeleteFileManagerFoldersId(ctx context.Context, folderId string) FileManagerAPIDeleteFileManagerFoldersIdRequest {
	return FileManagerAPIDeleteFileManagerFoldersIdRequest{
		ApiService: a,
		ctx: ctx,
		folderId: folderId,
	}
}

// Execute executes the request
func (a *FileManagerAPIService) DeleteFileManagerFoldersIdExecute(r FileManagerAPIDeleteFileManagerFoldersIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FileManagerAPIService.DeleteFileManagerFoldersId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/file-manager/folders/{folder_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"folder_id"+"}", url.PathEscape(parameterValueToString(r.folderId, "folderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type FileManagerAPIGetFileManagerFilesRequest struct {
	ctx context.Context
	ApiService FileManagerAPI
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
	type_ *string
	createdBy *string
	beforeCreatedAt *string
	sinceCreatedAt *string
	sortField *string
	sortDir *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r FileManagerAPIGetFileManagerFilesRequest) Fields(fields []string) FileManagerAPIGetFileManagerFilesRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r FileManagerAPIGetFileManagerFilesRequest) ExcludeFields(excludeFields []string) FileManagerAPIGetFileManagerFilesRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r FileManagerAPIGetFileManagerFilesRequest) Count(count int32) FileManagerAPIGetFileManagerFilesRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r FileManagerAPIGetFileManagerFilesRequest) Offset(offset int32) FileManagerAPIGetFileManagerFilesRequest {
	r.offset = &offset
	return r
}

// The file type for the File Manager file.
func (r FileManagerAPIGetFileManagerFilesRequest) Type_(type_ string) FileManagerAPIGetFileManagerFilesRequest {
	r.type_ = &type_
	return r
}

// The Mailchimp account user who created the File Manager file.
func (r FileManagerAPIGetFileManagerFilesRequest) CreatedBy(createdBy string) FileManagerAPIGetFileManagerFilesRequest {
	r.createdBy = &createdBy
	return r
}

// Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r FileManagerAPIGetFileManagerFilesRequest) BeforeCreatedAt(beforeCreatedAt string) FileManagerAPIGetFileManagerFilesRequest {
	r.beforeCreatedAt = &beforeCreatedAt
	return r
}

// Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r FileManagerAPIGetFileManagerFilesRequest) SinceCreatedAt(sinceCreatedAt string) FileManagerAPIGetFileManagerFilesRequest {
	r.sinceCreatedAt = &sinceCreatedAt
	return r
}

// Returns files sorted by the specified field.
func (r FileManagerAPIGetFileManagerFilesRequest) SortField(sortField string) FileManagerAPIGetFileManagerFilesRequest {
	r.sortField = &sortField
	return r
}

// Determines the order direction for sorted results.
func (r FileManagerAPIGetFileManagerFilesRequest) SortDir(sortDir string) FileManagerAPIGetFileManagerFilesRequest {
	r.sortDir = &sortDir
	return r
}

func (r FileManagerAPIGetFileManagerFilesRequest) Execute() (*FileManager, *http.Response, error) {
	return r.ApiService.GetFileManagerFilesExecute(r)
}

/*
GetFileManagerFiles List stored files

Get a list of available images and files stored in the File Manager for the account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FileManagerAPIGetFileManagerFilesRequest
*/
func (a *FileManagerAPIService) GetFileManagerFiles(ctx context.Context) FileManagerAPIGetFileManagerFilesRequest {
	return FileManagerAPIGetFileManagerFilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FileManager
func (a *FileManagerAPIService) GetFileManagerFilesExecute(r FileManagerAPIGetFileManagerFilesRequest) (*FileManager, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FileManager
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FileManagerAPIService.GetFileManagerFiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/file-manager/files"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.createdBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by", r.createdBy, "")
	}
	if r.beforeCreatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before_created_at", r.beforeCreatedAt, "")
	}
	if r.sinceCreatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "since_created_at", r.sinceCreatedAt, "")
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_field", r.sortField, "")
	}
	if r.sortDir != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_dir", r.sortDir, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FileManagerAPIGetFileManagerFilesIdRequest struct {
	ctx context.Context
	ApiService FileManagerAPI
	fileId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r FileManagerAPIGetFileManagerFilesIdRequest) Fields(fields []string) FileManagerAPIGetFileManagerFilesIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r FileManagerAPIGetFileManagerFilesIdRequest) ExcludeFields(excludeFields []string) FileManagerAPIGetFileManagerFilesIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r FileManagerAPIGetFileManagerFilesIdRequest) Execute() (*GalleryFile, *http.Response, error) {
	return r.ApiService.GetFileManagerFilesIdExecute(r)
}

/*
GetFileManagerFilesId Get file

Get information about a specific file in the File Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileId The unique id for the File Manager file.
 @return FileManagerAPIGetFileManagerFilesIdRequest
*/
func (a *FileManagerAPIService) GetFileManagerFilesId(ctx context.Context, fileId string) FileManagerAPIGetFileManagerFilesIdRequest {
	return FileManagerAPIGetFileManagerFilesIdRequest{
		ApiService: a,
		ctx: ctx,
		fileId: fileId,
	}
}

// Execute executes the request
//  @return GalleryFile
func (a *FileManagerAPIService) GetFileManagerFilesIdExecute(r FileManagerAPIGetFileManagerFilesIdRequest) (*GalleryFile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GalleryFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FileManagerAPIService.GetFileManagerFilesId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/file-manager/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", url.PathEscape(parameterValueToString(r.fileId, "fileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FileManagerAPIGetFileManagerFoldersRequest struct {
	ctx context.Context
	ApiService FileManagerAPI
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
	createdBy *string
	beforeCreatedAt *string
	sinceCreatedAt *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r FileManagerAPIGetFileManagerFoldersRequest) Fields(fields []string) FileManagerAPIGetFileManagerFoldersRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r FileManagerAPIGetFileManagerFoldersRequest) ExcludeFields(excludeFields []string) FileManagerAPIGetFileManagerFoldersRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r FileManagerAPIGetFileManagerFoldersRequest) Count(count int32) FileManagerAPIGetFileManagerFoldersRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r FileManagerAPIGetFileManagerFoldersRequest) Offset(offset int32) FileManagerAPIGetFileManagerFoldersRequest {
	r.offset = &offset
	return r
}

// The Mailchimp account user who created the File Manager file.
func (r FileManagerAPIGetFileManagerFoldersRequest) CreatedBy(createdBy string) FileManagerAPIGetFileManagerFoldersRequest {
	r.createdBy = &createdBy
	return r
}

// Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r FileManagerAPIGetFileManagerFoldersRequest) BeforeCreatedAt(beforeCreatedAt string) FileManagerAPIGetFileManagerFoldersRequest {
	r.beforeCreatedAt = &beforeCreatedAt
	return r
}

// Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r FileManagerAPIGetFileManagerFoldersRequest) SinceCreatedAt(sinceCreatedAt string) FileManagerAPIGetFileManagerFoldersRequest {
	r.sinceCreatedAt = &sinceCreatedAt
	return r
}

func (r FileManagerAPIGetFileManagerFoldersRequest) Execute() (*FileManagerFolders, *http.Response, error) {
	return r.ApiService.GetFileManagerFoldersExecute(r)
}

/*
GetFileManagerFolders List folders

Get a list of all folders in the File Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FileManagerAPIGetFileManagerFoldersRequest
*/
func (a *FileManagerAPIService) GetFileManagerFolders(ctx context.Context) FileManagerAPIGetFileManagerFoldersRequest {
	return FileManagerAPIGetFileManagerFoldersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FileManagerFolders
func (a *FileManagerAPIService) GetFileManagerFoldersExecute(r FileManagerAPIGetFileManagerFoldersRequest) (*FileManagerFolders, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FileManagerFolders
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FileManagerAPIService.GetFileManagerFolders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/file-manager/folders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.createdBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by", r.createdBy, "")
	}
	if r.beforeCreatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before_created_at", r.beforeCreatedAt, "")
	}
	if r.sinceCreatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "since_created_at", r.sinceCreatedAt, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FileManagerAPIGetFileManagerFoldersFilesRequest struct {
	ctx context.Context
	ApiService FileManagerAPI
	folderId string
	fields *[]string
	excludeFields *[]string
	count *int32
	offset *int32
	type_ *string
	createdBy *string
	beforeCreatedAt *string
	sinceCreatedAt *string
	sortField *string
	sortDir *string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r FileManagerAPIGetFileManagerFoldersFilesRequest) Fields(fields []string) FileManagerAPIGetFileManagerFoldersFilesRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r FileManagerAPIGetFileManagerFoldersFilesRequest) ExcludeFields(excludeFields []string) FileManagerAPIGetFileManagerFoldersFilesRequest {
	r.excludeFields = &excludeFields
	return r
}

// The number of records to return. Default value is 10. Maximum value is 1000
func (r FileManagerAPIGetFileManagerFoldersFilesRequest) Count(count int32) FileManagerAPIGetFileManagerFoldersFilesRequest {
	r.count = &count
	return r
}

// Used for [pagination](https://mailchimp.com/developer/marketing/docs/methods-parameters/#pagination), this it the number of records from a collection to skip. Default value is 0.
func (r FileManagerAPIGetFileManagerFoldersFilesRequest) Offset(offset int32) FileManagerAPIGetFileManagerFoldersFilesRequest {
	r.offset = &offset
	return r
}

// The file type for the File Manager file.
func (r FileManagerAPIGetFileManagerFoldersFilesRequest) Type_(type_ string) FileManagerAPIGetFileManagerFoldersFilesRequest {
	r.type_ = &type_
	return r
}

// The Mailchimp account user who created the File Manager file.
func (r FileManagerAPIGetFileManagerFoldersFilesRequest) CreatedBy(createdBy string) FileManagerAPIGetFileManagerFoldersFilesRequest {
	r.createdBy = &createdBy
	return r
}

// Restrict the response to files created before the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r FileManagerAPIGetFileManagerFoldersFilesRequest) BeforeCreatedAt(beforeCreatedAt string) FileManagerAPIGetFileManagerFoldersFilesRequest {
	r.beforeCreatedAt = &beforeCreatedAt
	return r
}

// Restrict the response to files created after the set date. Uses ISO 8601 time format: 2015-10-21T15:41:36+00:00.
func (r FileManagerAPIGetFileManagerFoldersFilesRequest) SinceCreatedAt(sinceCreatedAt string) FileManagerAPIGetFileManagerFoldersFilesRequest {
	r.sinceCreatedAt = &sinceCreatedAt
	return r
}

// Returns files sorted by the specified field.
func (r FileManagerAPIGetFileManagerFoldersFilesRequest) SortField(sortField string) FileManagerAPIGetFileManagerFoldersFilesRequest {
	r.sortField = &sortField
	return r
}

// Determines the order direction for sorted results.
func (r FileManagerAPIGetFileManagerFoldersFilesRequest) SortDir(sortDir string) FileManagerAPIGetFileManagerFoldersFilesRequest {
	r.sortDir = &sortDir
	return r
}

func (r FileManagerAPIGetFileManagerFoldersFilesRequest) Execute() (*FileManager, *http.Response, error) {
	return r.ApiService.GetFileManagerFoldersFilesExecute(r)
}

/*
GetFileManagerFoldersFiles List stored files

Get a list of available images and files stored in this folder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param folderId The unique id for the File Manager folder.
 @return FileManagerAPIGetFileManagerFoldersFilesRequest
*/
func (a *FileManagerAPIService) GetFileManagerFoldersFiles(ctx context.Context, folderId string) FileManagerAPIGetFileManagerFoldersFilesRequest {
	return FileManagerAPIGetFileManagerFoldersFilesRequest{
		ApiService: a,
		ctx: ctx,
		folderId: folderId,
	}
}

// Execute executes the request
//  @return FileManager
func (a *FileManagerAPIService) GetFileManagerFoldersFilesExecute(r FileManagerAPIGetFileManagerFoldersFilesRequest) (*FileManager, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FileManager
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FileManagerAPIService.GetFileManagerFoldersFiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/file-manager/folders/{folder_id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"folder_id"+"}", url.PathEscape(parameterValueToString(r.folderId, "folderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	} else {
		var defaultValue int32 = 0
		r.offset = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.createdBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by", r.createdBy, "")
	}
	if r.beforeCreatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before_created_at", r.beforeCreatedAt, "")
	}
	if r.sinceCreatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "since_created_at", r.sinceCreatedAt, "")
	}
	if r.sortField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_field", r.sortField, "")
	}
	if r.sortDir != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_dir", r.sortDir, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FileManagerAPIGetFileManagerFoldersIdRequest struct {
	ctx context.Context
	ApiService FileManagerAPI
	folderId string
	fields *[]string
	excludeFields *[]string
}

// A comma-separated list of fields to return. Reference parameters of sub-objects with dot notation.
func (r FileManagerAPIGetFileManagerFoldersIdRequest) Fields(fields []string) FileManagerAPIGetFileManagerFoldersIdRequest {
	r.fields = &fields
	return r
}

// A comma-separated list of fields to exclude. Reference parameters of sub-objects with dot notation.
func (r FileManagerAPIGetFileManagerFoldersIdRequest) ExcludeFields(excludeFields []string) FileManagerAPIGetFileManagerFoldersIdRequest {
	r.excludeFields = &excludeFields
	return r
}

func (r FileManagerAPIGetFileManagerFoldersIdRequest) Execute() (*GalleryFolder, *http.Response, error) {
	return r.ApiService.GetFileManagerFoldersIdExecute(r)
}

/*
GetFileManagerFoldersId Get folder

Get information about a specific folder in the File Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param folderId The unique id for the File Manager folder.
 @return FileManagerAPIGetFileManagerFoldersIdRequest
*/
func (a *FileManagerAPIService) GetFileManagerFoldersId(ctx context.Context, folderId string) FileManagerAPIGetFileManagerFoldersIdRequest {
	return FileManagerAPIGetFileManagerFoldersIdRequest{
		ApiService: a,
		ctx: ctx,
		folderId: folderId,
	}
}

// Execute executes the request
//  @return GalleryFolder
func (a *FileManagerAPIService) GetFileManagerFoldersIdExecute(r FileManagerAPIGetFileManagerFoldersIdRequest) (*GalleryFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GalleryFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FileManagerAPIService.GetFileManagerFoldersId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/file-manager/folders/{folder_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"folder_id"+"}", url.PathEscape(parameterValueToString(r.folderId, "folderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "csv")
	}
	if r.excludeFields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude_fields", r.excludeFields, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FileManagerAPIPatchFileManagerFilesIdRequest struct {
	ctx context.Context
	ApiService FileManagerAPI
	fileId string
	body *GalleryFile2
}

func (r FileManagerAPIPatchFileManagerFilesIdRequest) Body(body GalleryFile2) FileManagerAPIPatchFileManagerFilesIdRequest {
	r.body = &body
	return r
}

func (r FileManagerAPIPatchFileManagerFilesIdRequest) Execute() (*GalleryFile, *http.Response, error) {
	return r.ApiService.PatchFileManagerFilesIdExecute(r)
}

/*
PatchFileManagerFilesId Update file

Update a file in the File Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileId The unique id for the File Manager file.
 @return FileManagerAPIPatchFileManagerFilesIdRequest
*/
func (a *FileManagerAPIService) PatchFileManagerFilesId(ctx context.Context, fileId string) FileManagerAPIPatchFileManagerFilesIdRequest {
	return FileManagerAPIPatchFileManagerFilesIdRequest{
		ApiService: a,
		ctx: ctx,
		fileId: fileId,
	}
}

// Execute executes the request
//  @return GalleryFile
func (a *FileManagerAPIService) PatchFileManagerFilesIdExecute(r FileManagerAPIPatchFileManagerFilesIdRequest) (*GalleryFile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GalleryFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FileManagerAPIService.PatchFileManagerFilesId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/file-manager/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", url.PathEscape(parameterValueToString(r.fileId, "fileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FileManagerAPIPatchFileManagerFoldersIdRequest struct {
	ctx context.Context
	ApiService FileManagerAPI
	folderId string
	body *GalleryFolder1
}

func (r FileManagerAPIPatchFileManagerFoldersIdRequest) Body(body GalleryFolder1) FileManagerAPIPatchFileManagerFoldersIdRequest {
	r.body = &body
	return r
}

func (r FileManagerAPIPatchFileManagerFoldersIdRequest) Execute() (*GalleryFolder, *http.Response, error) {
	return r.ApiService.PatchFileManagerFoldersIdExecute(r)
}

/*
PatchFileManagerFoldersId Update folder

Update a specific File Manager folder.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param folderId The unique id for the File Manager folder.
 @return FileManagerAPIPatchFileManagerFoldersIdRequest
*/
func (a *FileManagerAPIService) PatchFileManagerFoldersId(ctx context.Context, folderId string) FileManagerAPIPatchFileManagerFoldersIdRequest {
	return FileManagerAPIPatchFileManagerFoldersIdRequest{
		ApiService: a,
		ctx: ctx,
		folderId: folderId,
	}
}

// Execute executes the request
//  @return GalleryFolder
func (a *FileManagerAPIService) PatchFileManagerFoldersIdExecute(r FileManagerAPIPatchFileManagerFoldersIdRequest) (*GalleryFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GalleryFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FileManagerAPIService.PatchFileManagerFoldersId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/file-manager/folders/{folder_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"folder_id"+"}", url.PathEscape(parameterValueToString(r.folderId, "folderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FileManagerAPIPostFileManagerFilesRequest struct {
	ctx context.Context
	ApiService FileManagerAPI
	body *GalleryFile1
}

func (r FileManagerAPIPostFileManagerFilesRequest) Body(body GalleryFile1) FileManagerAPIPostFileManagerFilesRequest {
	r.body = &body
	return r
}

func (r FileManagerAPIPostFileManagerFilesRequest) Execute() (*GalleryFile, *http.Response, error) {
	return r.ApiService.PostFileManagerFilesExecute(r)
}

/*
PostFileManagerFiles Add file

Upload a new image or file to the File Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FileManagerAPIPostFileManagerFilesRequest
*/
func (a *FileManagerAPIService) PostFileManagerFiles(ctx context.Context) FileManagerAPIPostFileManagerFilesRequest {
	return FileManagerAPIPostFileManagerFilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GalleryFile
func (a *FileManagerAPIService) PostFileManagerFilesExecute(r FileManagerAPIPostFileManagerFilesRequest) (*GalleryFile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GalleryFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FileManagerAPIService.PostFileManagerFiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/file-manager/files"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FileManagerAPIPostFileManagerFoldersRequest struct {
	ctx context.Context
	ApiService FileManagerAPI
	body *GalleryFolder1
}

func (r FileManagerAPIPostFileManagerFoldersRequest) Body(body GalleryFolder1) FileManagerAPIPostFileManagerFoldersRequest {
	r.body = &body
	return r
}

func (r FileManagerAPIPostFileManagerFoldersRequest) Execute() (*GalleryFolder, *http.Response, error) {
	return r.ApiService.PostFileManagerFoldersExecute(r)
}

/*
PostFileManagerFolders Add folder

Create a new folder in the File Manager.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return FileManagerAPIPostFileManagerFoldersRequest
*/
func (a *FileManagerAPIService) PostFileManagerFolders(ctx context.Context) FileManagerAPIPostFileManagerFoldersRequest {
	return FileManagerAPIPostFileManagerFoldersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GalleryFolder
func (a *FileManagerAPIService) PostFileManagerFoldersExecute(r FileManagerAPIPostFileManagerFoldersRequest) (*GalleryFolder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GalleryFolder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FileManagerAPIService.PostFileManagerFolders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/file-manager/folders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ProblemDetailDocument
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
